<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Chen • Posts by &#34;面试&#34; category</title>
    <link href="http://example.com" />
    <updated>2024-07-14T01:56:54.000Z</updated>
    <category term="Java" />
    <category term="Vue3" />
    <category term="GLM" />
    <category term="dp" />
    <category term="git" />
    <category term="位运算" />
    <category term="分类讨论" />
    <category term="redis" />
    <category term="lunix" />
    <category term="机器学习" />
    <category term="vue3" />
    <category term="LLM" />
    <category term="AI" />
    <category term="Vue.js" />
    <category term="微信小程序" />
    <category term="面试" />
    <category term="chatgpt" />
    <category term="设计模式" />
    <entry>
        <id>http://example.com/2024/07/14/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
        <title>Java面试题</title>
        <link rel="alternate" href="http://example.com/2024/07/14/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
        <content type="html">&lt;p&gt;记录&lt;/p&gt;
&lt;h1 id=&#34;java&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; Java&lt;/h1&gt;
&lt;h2 id=&#34;1-jdk-jre-jvm-三者区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-jdk-jre-jvm-三者区别&#34;&gt;#&lt;/a&gt; 1. JDK、JRE、JVM 三者区别&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714100212330.png&#34; alt=&#34;image-20240714100212330&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2java-中创建对象的几种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2java-中创建对象的几种方式&#34;&gt;#&lt;/a&gt; 2.Java 中创建对象的几种方式？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用 new 关键字：最常见的方式，这种方式我们还可以&lt;strong&gt;调用任意的构造器&lt;/strong&gt; (无参的和有参的)&lt;/li&gt;
&lt;li&gt;使用 Class.newlnstance: 通过 Class 类的 newInstance 创建对象，必须有&lt;strong&gt; public 的无参构造器&lt;/strong&gt;才行&lt;/li&gt;
&lt;li&gt;使用 Constructor.newlnstance: 通过 java.langrelect.Constructor 类中的 newlnstance 方法调用&lt;strong&gt;有参数的和私有的构造函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 Clone: 通过对象的 clone0 方法创建一个对象的副本。需要&lt;strong&gt;对象实现 Cloneable 接口并重写 clone () 方法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用反序列化：通过将对象转换为字节流并保存到文件或传输到网络，然后再从字节流中重新创建对象。需要对象&lt;strong&gt;实现 Serializable&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3final-finally-finalize-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3final-finally-finalize-的区别&#34;&gt;#&lt;/a&gt; 3.final、finally、 finalize 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;final 关键字：用于修饰类、方法、变量、入参和对象&lt;/strong&gt;&lt;br /&gt;
应用于类时，表示该类是最终类，不能被其他类继承，&lt;br /&gt;
 应用于方法时，表示该方法是最终方法，不能被子类重写&lt;br /&gt;
应用于变量时，表示该变量是一个常量，只能赋值一次。&lt;br /&gt;
应用于入参时，表示该入参在方法内无法被修改。&lt;br /&gt;
应用于对象时，该对象的引用不能被修改，但对象本身的状态是可变的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;finally 关键字：异常处理机制中的一部分，用于定义在 try-catch-finally 块中的 finally 块&lt;/strong&gt;&lt;br /&gt;
不论是否发生异常，finally 块中的代码都会执行&lt;br /&gt;
主要用于释放资源、关闭连接等必须确保执行的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;finalize 方法：是一个对象的方法，定义在 Object 类中&lt;/strong&gt;&lt;br /&gt;
在垃圾回收器将对象回收之前调用。&lt;br /&gt;
可以重写 finalize 方法，在其中编写对象在被回收前需要进行的清理操作，如释放资源等.&lt;br /&gt;
 请注意，不推荐使用 finalize 方法进行内存资源的释放，因为它没有被及时执行的保证，也可能导&lt;br /&gt;
致性能问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5两个对象的-hashcode0-相同则-equals-也一定为-true-吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5两个对象的-hashcode0-相同则-equals-也一定为-true-吗&#34;&gt;#&lt;/a&gt; 5. 两个对象的 hashCode0 相同，则 equals ( 也一定为 true 吗？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;两个对象的 hashCode (相同，equals) 不一定为 true;&lt;/li&gt;
&lt;li&gt;两个对象的 equals 为 true，则两个对象的 hashcode 一定为 true&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-的区别&#34;&gt;#&lt;/a&gt; 6.&amp;amp;、&amp;amp;&amp;amp;、|、|| 的区别&lt;/h2&gt;
&lt;p&gt;&amp;amp; 全比较，&amp;amp;&amp;amp; 只要第一个不成立则不再判断&lt;/p&gt;
&lt;h2 id=&#34;7java-中的参数传递时传值呢-还是传引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7java-中的参数传递时传值呢-还是传引用&#34;&gt;#&lt;/a&gt; 7.Java 中的参数传递时传值呢？还是传引用？&lt;/h2&gt;
&lt;p&gt;在 Java 中，方法参数传递是按值传递的。这意味着在方法调用时，实际上是将参数的值进行拷贝并传递给方法内部使用，而不是直接传递参数本身的引用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于&lt;strong&gt;基本数据类型&lt;/strong&gt; (如整数、浮点数等):&lt;strong&gt; 传递的是其值的拷贝&lt;/strong&gt;。任何对参数值的修改都不会影响原始变量。&lt;/li&gt;
&lt;li&gt;对于 ** 引用类型 (** 如对象、数组等):&lt;strong&gt; 传递的是引用的值的拷贝&lt;/strong&gt;，也就是说方法内部的参数和原始变量将引用同一个对象。虽然我们可以通过方法内部的参数修改对象的状态，但是对于引用本身的修改是不会影响原始变量的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8什么是-java-的序列化如何实现-java-的序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8什么是-java-的序列化如何实现-java-的序列化&#34;&gt;#&lt;/a&gt; 8. 什么是 Java 的序列化，如何实现 Java 的序列化？&lt;/h2&gt;
&lt;p&gt;定义:&lt;strong&gt; 序列化是指将一个对象转换为字节流&lt;/strong&gt;，以便在网络上传输或保存到文件中。序列化过程还可以通过反序列化将字节流重新转换为对象&lt;/p&gt;
&lt;p&gt;实现方式：通过&lt;strong&gt;实现 java.io.Serializable 接口&lt;/strong&gt;。该接口是一个&lt;strong&gt;标记接口&lt;/strong&gt;，没有任何方法定义，只要一个类实现了 Serializable 接口，就表示该类的对象可以被序列化。Java 序列化机制会根据对象的类结构自动进行序列化和反序列化操作。&lt;/p&gt;
&lt;h2 id=&#34;9java-中的反射是什么意思&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9java-中的反射是什么意思&#34;&gt;#&lt;/a&gt; 9.Java 中的反射是什么意思？&lt;/h2&gt;
&lt;p&gt;Java 的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为 Java 语言的反射机制&lt;/p&gt;
&lt;p&gt;简单的说：在运行时动态地获取、操作和修改类或对象的属性、方法、构造函数等信息的能力，而不需要在编译时预先知道类的具体信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714120514087.png&#34; alt=&#34;image-20240714120514087&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;10反射的应用场景有哪些-反射有什么优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10反射的应用场景有哪些-反射有什么优缺点&#34;&gt;#&lt;/a&gt; 10. 反射的应用场景有哪些？反射有什么优缺点？&lt;/h2&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; &lt;strong&gt;应用场景&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;反射是 Java 框架的灵魂技术，很多框架都使用了反射技术，如 spring，Mybatis，Hibernate 等.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JDBC 的数据库的连接&lt;/strong&gt;&lt;br /&gt;
在 JDBC 连接数据库中，一般包括加载驱动，获得数据库连接等步骤。而加载驱动，就是引入相关 Jar 包后，通过 Class.forName (加载数据库的驱动程序&lt;br /&gt;
 Class.forName (&amp;quot;com.mysgl.cj.jdbc.Driver&amp;quot;):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;xml 或 properties 等配置文件加载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring 通过 XML 配置模式装载 Bean，也是反射的一个典型例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;装载过程:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将程序内 XML 配置文件加载入内存中&lt;/li&gt;
&lt;li&gt;Java 类解析 xml 或者 properties 里面的内容，得到对应实体类的字节码字符串以及相关的属性信息&lt;/li&gt;
&lt;li&gt;使用反射机制，得到 Class 实例&lt;/li&gt;
&lt;li&gt;动态配置实例的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做当然是有好处的不用每次都去 new 实例了，并且可以修改配置文件，比较灵活。&lt;/p&gt;
&lt;h3 id=&#34;反射的优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射的优点&#34;&gt;#&lt;/a&gt; &lt;strong&gt;反射的优点&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;** 动态性:** 反射提供了在运行时动态地探索和操作类的能力。它允许我们在运行时获取类的信息、创建对象、调用方法和修改字段的值，从而使程序更加灵活、可扩展和动态适应复杂环境：：反射可以应对一些复杂的场景，如在插件化系统中根据配置文件加载类、动态代理、识别和处理注解等&lt;/p&gt;
&lt;h3 id=&#34;反射的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射的缺点&#34;&gt;#&lt;/a&gt; &lt;strong&gt;反射的缺点&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;** 性能问题:** 由于反射涉及到动态解析和调用，所以它通常比直接调用代码性能较低。反射需要进行额外的检查和处理，可能会导致性能下降&lt;br /&gt;
 ** 安全问题:** 反射可以绕过访问控制限制，例如访问私有方法和字段。这可能会导致安全隐患，因此在使用反射时需要小心处理，并确保只在必要情况下使用&lt;/p&gt;
&lt;h2 id=&#34;11怎么实现动态代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11怎么实现动态代理&#34;&gt;#&lt;/a&gt; 11. 怎么实现动态代理？&lt;/h2&gt;
&lt;p&gt;代理模式是一种设计模式，提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能&lt;/p&gt;
&lt;p&gt;动态代理实现方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK 实现: JDK Proxy 基于反射&lt;/li&gt;
&lt;li&gt;第三方类实现: CGLIB 基于 ASM (一个 Java 字节码操作框架)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何实现动态代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现动态代理&#34;&gt;#&lt;/a&gt; 如何实现动态代理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于接口的 JDK 动态代理
&lt;ul&gt;
&lt;li&gt;定义目标类，即被代理的类&lt;/li&gt;
&lt;li&gt;通过实现 InvocationHandler 接口来自定义自己的 InvocationHandler; 重写 invoke 方法，在此方法中定义增强逻辑。&lt;/li&gt;
&lt;li&gt;通过 Proxy.newProxylnstance 方法获得代理对象&lt;/li&gt;
&lt;li&gt;通过代理对象调用目标方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714122259992.png&#34; alt=&#34;image-20240714122259992&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714122522237.png&#34; alt=&#34;image-20240714122522237&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于类的 CGLIB 动态代理
&lt;ul&gt;
&lt;li&gt;引入 CGLIB 的相关依赖&lt;/li&gt;
&lt;li&gt;定义目标类，即被代理的类&lt;/li&gt;
&lt;li&gt;创建代理类实现 CGLIB 的 Methodinterceptor 接口，并重写 intercept 方法，在此方法中定义增强逻辑。&lt;/li&gt;
&lt;li&gt;使用 Enhancer 类创建代理对象，设置目标类、回调对象等参数&lt;/li&gt;
&lt;li&gt;调用代理对象的方法，实现代理行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714122735661.png&#34; alt=&#34;image-20240714122735661&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;jdk-proxy与cglib的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-proxy与cglib的区别&#34;&gt;#&lt;/a&gt; &lt;strong&gt;JDK Proxy 与 CGLIB 的区别&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于接口 vs. 基于类:&lt;br /&gt;
JDK Proxy &lt;strong&gt;只能代理接口类型&lt;/strong&gt;，它通过实现指定接口并生成代理对象来实现代理功能&lt;br /&gt;
 CGLIB &lt;strong&gt;可以代理普通的类&lt;/strong&gt;，它通过继承目标类，并在子类中重写方法来实现代理。&lt;/li&gt;
&lt;li&gt;实现方式:&lt;br /&gt;
JDK Proxy 是&lt;strong&gt;基于反射机制&lt;/strong&gt;实现的，它利用 Java 的反射 API 动态生成代理对象&lt;br /&gt;
 CGLIB 使用了&lt;strong&gt;字节码生成库&lt;/strong&gt;，直接操作字节码生成代理类。相比于 JDK 代理的反射调用，CGLIB 的方法调用更快速&lt;/li&gt;
&lt;li&gt;性能:&lt;br /&gt;
&lt;strong&gt; 由于 CGLIB 是直接对字节码进行操作，所以在创建和执行代理对象时通常比 JDK 代理更快速&lt;/strong&gt;&lt;br /&gt;
 JDK Proxy 的性能略低，因为它涉及到反射调用的开销。JDK8 版本已经优化，性能与 CGLIB 差不多。&lt;/li&gt;
&lt;li&gt;库依赖:&lt;br /&gt;
JDK Proxy 是 Java 标准库的一部分，无需额外的依赖&lt;br /&gt;
 CGLIB 需要引入相关的第三方库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-string-为什么不可变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-string-为什么不可变&#34;&gt;#&lt;/a&gt; 12. String 为什么不可变？&lt;/h2&gt;
&lt;p&gt;String 类本身是&lt;strong&gt; final&lt;/strong&gt; 的，不可以被继承&lt;/p&gt;
&lt;p&gt;String 类内部通过 **private final char value []** 实现，从而保证了引用的不可变和对外的不可见&lt;/p&gt;
&lt;p&gt;String 内部通过良好的封装，不去改变 value 数组的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要设计成不可变？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串池优化：不可变性&lt;strong&gt;允许字符串共享和重用&lt;/strong&gt;，节省内存空间和提高性能&lt;/li&gt;
&lt;li&gt;线程安全性：不可变类&lt;strong&gt;天然具备线程安全的特性&lt;/strong&gt;，无需额外同步措施&lt;/li&gt;
&lt;li&gt;缓存哈希值：不可变性&lt;strong&gt;使得字符串的哈希值可以被缓存，提高相关数据结构的性能&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TIPS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以用反射来改变 String 中 value 的值，所以严格意义上说不一定不可变。&lt;/p&gt;
&lt;h2 id=&#34;13string-stringbuilder-stringbuffer-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13string-stringbuilder-stringbuffer-的区别&#34;&gt;#&lt;/a&gt; 13.String、StringBuilder、StringBuffer 的区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可变性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String 类是不可变类，一旦创建就无法改变其内容。对于每次修改操作 (例如拼接字符串)，都会创建一个新的字符串对象，旧对象则成为垃圾数据，需要等待垃圾回收。它们可以直接在原始对象上进行修改而不创建新的对象&lt;/li&gt;
&lt;li&gt;StringBuilder 和 StringBuffer 类是可变的，这种特性使得在频繁拼接或修改字符串时更高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程安全性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String 类是线程安全的，因为它的不可变性保证了多个线程同时访问同一个字符串对象时的安全性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StringBuilder 类是非线程安全的&lt;/strong&gt;，它的方法没有进行同步处理。如果在多线程环境下使用 StringBuilder，需要额外来取措施保证线程安全&lt;/li&gt;
&lt;li&gt;StringBuffer 类是线程安全的，它的方法进行了同步处理，因此可以在多线程环境下使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在单线程环境下，StringBuilder 的性能通常优于 StringBuffer，因为 StringBuilder 不进行同步处理，省去了同步的开销&lt;/li&gt;
&lt;li&gt;在多线程环境下，由于 StringBuffer 进行了同步处理，可能会带来额外的性能开销。但当线程同步是必需的时候，StringBuffer 是一个可靠的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714131415731.png&#34; alt=&#34;image-20240714131415731&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;14-string-str-i与-string-str-new-stringi-一样吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-string-str-i与-string-str-new-stringi-一样吗&#34;&gt;#&lt;/a&gt; 14. String str = &amp;quot;i&amp;quot; 与 String str = new String (&amp;quot;i&amp;quot;) 一样吗？&lt;/h2&gt;
&lt;p&gt;不一样，因为内存的分配方式不一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String str=&amp;quot;i&amp;quot; 的方式 JVM 会将其分配到&lt;strong&gt;常量池&lt;/strong&gt;中；&lt;/li&gt;
&lt;li&gt;String str=new String (“i”) 方式，则会被分到&lt;strong&gt;堆内存&lt;/strong&gt;中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;15-接口和抽象类有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-接口和抽象类有什么区别&#34;&gt;#&lt;/a&gt; 15. 接口和抽象类有什么区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义关键字不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口使用关键字&lt;strong&gt; interface&lt;/strong&gt; 来定义。抽象类使用关键字&lt;strong&gt; abstract&lt;/strong&gt; 来定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承或实现的关键字不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口使用&lt;strong&gt; implements&lt;/strong&gt; 关键字定义其具体实现。 抽象类使用 **extends ** 关键字实现继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子类扩展的数量不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口的实现类可以有多个&lt;/li&gt;
&lt;li&gt;抽象类的子类，只能继承一个抽象类，抽象类的子类，只能继承一个抽象类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性访问控制符不同，方法控制符不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口中属性的访问控制符只能是 public (接口中的属性默认是 public static final 修饰的)&lt;/li&gt;
&lt;li&gt;抽象类中的属性访问控制符无限制，可为任意控制符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tip：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口可&lt;strong&gt;继承&lt;/strong&gt;多个父接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;16-什么是浅拷贝和深拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-什么是浅拷贝和深拷贝&#34;&gt;#&lt;/a&gt; 16. 什么是浅拷贝和深拷贝？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浅拷贝: &lt;strong&gt;只复制指向某个对象的指针&lt;/strong&gt;，而不复制对象本身，新旧对象共享一块内存&lt;/li&gt;
&lt;li&gt;深拷贝: &lt;strong&gt;复制并创建一个一摸一样的对象&lt;/strong&gt;，不共享内存，修改新对象，旧对象保持不变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714132445512.png&#34; alt=&#34;image-20240714132445512&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;17-overload-override-overwrite的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-overload-override-overwrite的区别&#34;&gt;#&lt;/a&gt; 17. Overload、Override、Overwrite 的区别？&lt;/h2&gt;
&lt;p&gt;在面向对象编程中，有三个概念经常用到: Overload (重载)、Override (重写) 和 Overwrite (覆盖), 这些概念描述了不同的方法或函数之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重载 (Overload) :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：在同一个类中，可以定义多个具有相同名称但参数列表不同的方法，它们被称为方法的重载&lt;/p&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法名相同&lt;/strong&gt;，参数列表不同&lt;/li&gt;
&lt;li&gt;重载方法可以有不同的返回类型&lt;/li&gt;
&lt;li&gt;重载方法必须在同一个类中&lt;/li&gt;
&lt;li&gt;重载方法的&lt;strong&gt;区分依据是参数&lt;/strong&gt;的个数、类型或者顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714133843845.png&#34; alt=&#34;image-20240714133843845&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重写 (Override)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：子类继承自父类时，可以对父类的方法进行重新实现，这被称为方法的重写&lt;/p&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类中的方法与父类中的方法具有相同的名称、参数列表和返回类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子类中的方法不能比父类的方法访问性更严格&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子类方法抛出的异常不能比父类方法抛出的异常更多&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;子类方法可以覆盖父类方法的实现，提供自己的实现逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714133829892.png&#34; alt=&#34;image-20240714133829892&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖 (Overwrite)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：在文件操作中，覆盖 (Overwrite) 通常指的是&lt;strong&gt;将已有的文件内容替换为新的内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;覆盖通常发生在文件写入时，用新的内容覆盖原有的内容，使其被替代&lt;/li&gt;
&lt;li&gt;覆盖可能会导致原文件的内容丢失，因此在进行覆盖操作时要小心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;18-exception和error有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18-exception和error有什么区别&#34;&gt;#&lt;/a&gt; 18. Exception 和 Error 有什么区别？&lt;/h2&gt;
&lt;p&gt;在 Java 中，Exception 和 Error 是两个不同的类，它们&lt;strong&gt;都继承自 Throwable 类&lt;/strong&gt;。下面是它们之间的区别:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exception (异常) :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exception 表示在程序执行过程中可能出现的可处理的异常情况。** 它一般由代码逻辑错误、外部条件变化等原因引起，可以通过适当的处理措施来恢复正常的程序执行。**Exception 分为两种类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;受检异常 (Checked Exception)&lt;/strong&gt; : 编译器要求必须在代码中显式地处理受检异常，否则代码无法通过编译。常见的受检异常包括 IOException、SQLException 等。（用 try-catch-finally）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非受检异常 (Unchecked Exception)&lt;/strong&gt; : 编译器对非受检异常不强制要求进行处理，但可以选择处理或者将其抛给上层调用者处理。常见的非受检异常包括 NullPointerException、ArrayIndexOutOfBoundsException 等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Error (错误)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Error 是&lt;strong&gt;指应用程序通常无法处理或恢复的严重问题&lt;/strong&gt;，如除零错误&lt;/p&gt;
&lt;p&gt;Error 通常表示&lt;strong&gt;虚拟机 (JVM) 的错误状态或系统级错误&lt;/strong&gt;，例如 OutOfMemoryError、StackOverflowError 等&lt;/p&gt;
&lt;p&gt;Error 通常意味着应用程序处于不可恢复的状态，因此一般不被捕获和处理&lt;/p&gt;
&lt;p&gt;与异常不同，Error 没有规定要求应用程序处理或捕获它们。&lt;/p&gt;
&lt;h2 id=&#34;19-java中的io流的分类-说出几个你熟悉的实现类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19-java中的io流的分类-说出几个你熟悉的实现类&#34;&gt;#&lt;/a&gt; 19. Java 中的 IO 流的分类？说出几个你熟悉的实现类？&lt;/h2&gt;
&lt;p&gt;在 Java 中，10 流可以根据其功能和作用进行分类。主要分为四种类型：字节流、字符流、缓冲流和对象流&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240714134749700.png&#34; alt=&#34;image-20240714134749700&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字节流 (Byte Stream):&lt;/strong&gt; &lt;strong&gt;以字节为单位进行读写操作的流&lt;/strong&gt;。字节流通常用于处理二进制数据或字节流形式的文本数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InputStream: 字节输入流的抽象基类，是所有字节输入流的超类&lt;/li&gt;
&lt;li&gt;OutputStream: 字节输出流的抽象基类，是所有字节输出流的超类&lt;/li&gt;
&lt;li&gt;一些实现类包括: FilelnputStream、FileOutputStream、ByteArraylnputStream、ByteArrayOutputStream 等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;字符流 (Character Stream):&lt;/strong&gt; &lt;strong&gt;以字符为单位进行读写操作的流&lt;/strong&gt;。字符流通常用于处理字符数据，支持 Unicode 编码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reader: 字符输入流的抽象基类，是所有字符输入流的超类&lt;/li&gt;
&lt;li&gt;Writer: 字符输出流的抽象基类，是所有字符输出流的超类&lt;/li&gt;
&lt;li&gt;一些实现类包括: FileReader、FileWriter、BufferedReader、PrintWriter 等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缓冲流 (Buffered Stream)&lt;/strong&gt; : 提供了&lt;strong&gt;缓冲功能&lt;/strong&gt;，可以减少实际 IO 操作的次数，提高读写效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BufferedInputStream: 字节缓冲输入流，装饰器模式实现&lt;/li&gt;
&lt;li&gt;BufferedOutputStream: 字节缓冲输出流，装饰器模式实现&lt;/li&gt;
&lt;li&gt;BufferedReader: 字符缓冲输入流，装饰器模式实现&lt;/li&gt;
&lt;li&gt;BufferedWriter: 字符缓冲输出流，装饰器模式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对象流 (Object Stream)&lt;/strong&gt;:  &lt;strong&gt;用于读写 Java 对象的流&lt;/strong&gt;。可以方便地将对象序列化和反序列化到文件或网络中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ObjectlnputStream: 对象输入流，用于从流中读取对象&lt;/li&gt;
&lt;li&gt;ObjectOutputStream: 对象输出流，用于将对象写入流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;20-常见的异常类有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#20-常见的异常类有哪些&#34;&gt;#&lt;/a&gt; 20. 常见的异常类有哪些？&lt;/h2&gt;
&lt;p&gt;RuntimeException (运行时异常)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NullPointerException: 空指针异常，当对一个对象引用调用方法或访问属性时，对象引用为空&lt;/li&gt;
&lt;li&gt;ArraylndexOutOfBoundsException: 数组下标越界异常，当尝试访问数组的不存在的索引时抛出&lt;/li&gt;
&lt;li&gt;lllegalArgumentException: 非法参数异常，当传递给方法的参数不合法时抛出&lt;/li&gt;
&lt;li&gt;lllegalStateException: 非法状态异常，当对象处于不允许的状态下调用方法时抛出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IOException (输入输出异常) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FileNotFoundException: 文件未找到异常，当尝试打开不存在的文件时抛出&lt;/li&gt;
&lt;li&gt;EOFException: 文件结束异常，当从数据流读取数据时到达文件末尾时抛出&lt;/li&gt;
&lt;li&gt;SocketException: 套接字异常，当与套接字相关的操作失败时抛出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SQLException (数据库异常) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQLSyntaxErrorException: SQL 语法错误异常，当执行 SQL 语句时遇到语法错误时抛出&lt;/li&gt;
&lt;li&gt;DataAccessException: 数据访问异常，当访问数据库或数据存储出现问题时抛出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ClassNotFoundException: 类未找到异常，当尝试加载不存在的类时抛出&lt;/p&gt;
&lt;h2 id=&#34;22-arraylist和linkedlist区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-arraylist和linkedlist区别&#34;&gt;#&lt;/a&gt; 22. ArrayList 和 LinkedList 区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;底层数据结构不同，ArrayList 底层是基于数组实现的，LinkedList 底层是基于链表实现的&lt;/li&gt;
&lt;li&gt;由于底层数据结构不同，他们所适用的场景也不同，ArrayList 更适合随机查找，Linkedlist 更适合删除和添加，查询、添加、删除的时间复杂度不同&lt;/li&gt;
&lt;li&gt;另外 Arravlist 和 LinkedList 都实现了 List 接口，但是 LinkedList 还额外实现了 Deque 接口，所以 LinkedlList 还可以当做队列来使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;24-copyonwritearraylist的底层原理是怎样的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-copyonwritearraylist的底层原理是怎样的&#34;&gt;#&lt;/a&gt; 24. CopyOnWriteArrayList 的底层原理是怎样的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先 CopyOnWriteArrayList 内也是用时数组来实现的，在向 CopyOnWriteArrayList 添元索时，会复制一个新的数组，&lt;strong&gt;写操作在新数进行，读操作在原数组上进行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;并且，&lt;strong&gt;写操作会加锁&lt;/strong&gt;，防止出现并发写入丢失数据的问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写操作结束之后会把原数组指向新数组&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;CopyOnWiteArraylist&lt;strong&gt; 允许在写操作时来读取数据，大大提高了读的性能，因此适合读多写少的应用场&lt;/strong&gt;，但是 CopyOnWiteAraylist 会比较占内存，同时可能读到的数据不是实时最新的数据，所以不&lt;strong&gt;适合实时性要求很高的场景&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;30-hashmap的扩容机制原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#30-hashmap的扩容机制原理&#34;&gt;#&lt;/a&gt; 30. HashMap 的扩容机制原理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.7 版本&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先生成新数组&lt;/li&gt;
&lt;li&gt;遍历老数组中的每个位置上的链表上的每个元素&lt;/li&gt;
&lt;li&gt;取每个元素的 key，并基于新数组长度，计算出每个元素在新数组中的下标&lt;/li&gt;
&lt;li&gt;将元素添加到新数组中去&lt;/li&gt;
&lt;li&gt;所有元素转移完了之后，将新数组赋值给 HashMap 对象的 table 属性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1.8 版本&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先生成新数组&lt;/li&gt;
&lt;li&gt;遍历老数组中的每个位置上的链表或红黑树&lt;/li&gt;
&lt;li&gt;如果是链表，则直接将链表中的每个元素重新计算下标，并添加到新数组中去&lt;/li&gt;
&lt;li&gt;如果是红黑树，则先遍历红黑树，先计算出红黑树中每个元素对应在新数组中的下标位置
&lt;ol&gt;
&lt;li&gt;统计每个下标位置的元素个数&lt;/li&gt;
&lt;li&gt;如果该位置下的元素个数超过了 8，则生成一个新的红黑树，并将根节点的添加到新数组的对应位置&lt;/li&gt;
&lt;li&gt;如果该位置下的元素个数没有超过 8，那么则生成一个链表，并将链表的头节点添加到新数组的对应位置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;所有元素转移完了之后，将新数组赋值给 HashMap 对象的 table 属性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;1.7 版本的 hash 链表的部分是头插法，不需要遍历到尾部，更快&lt;/p&gt;
&lt;p&gt;1.8 版本的 hash 链表的部分是尾插法，因为要判断是否大于 8，大于 8 就转换成红黑树，而知道数量需要遍历链表，则用尾插法&lt;/p&gt;
&lt;h2 id=&#34;32-java死锁如何避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-java死锁如何避免&#34;&gt;#&lt;/a&gt; 32. Java 死锁如何避免&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;造成死锁的几个原因&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个资源每次只能被一个线程使用&lt;/li&gt;
&lt;li&gt;一个线程在阻塞等待某个资源时，不释放已占有资源&lt;/li&gt;
&lt;li&gt;一个线程已经获得的资源，在未使用完之前，不能被强行剥夺&lt;/li&gt;
&lt;li&gt;若干线程形成头尾相接的循环等待资源关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是造成死锁必须要达到的 4 个条件，如果要避免死锁，只需要不满足其中某一个条件即可。&lt;/p&gt;
&lt;p&gt;而其中前 3 个条件是作为锁要符合的条件，所以要避免死执就需要打破第 4 个条件，不出现循环等待锁的关系&lt;/p&gt;
&lt;p&gt;在开发过程中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要注意&lt;strong&gt;加锁顺序&lt;/strong&gt;，保证每个线程按同样的顺序进行加锁&lt;/li&gt;
&lt;li&gt;要注意加锁时限，可以针对所设置一个&lt;strong&gt;超时时间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要注意&lt;strong&gt;死锁检查&lt;/strong&gt;，这是一种预防机制，确保在第一时间发现死锁并进行解决&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;34-java中有哪些类加载器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-java中有哪些类加载器&#34;&gt;#&lt;/a&gt; 34. Java 中有哪些类加载器&lt;/h2&gt;
&lt;p&gt;JDK 自带有三个类加载器: bootstrap ClassLoader、ExtClassLoader、AppClassLoader。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BootStrapClassLoader 是 ExtClassLoader 的父类加载器，默认负责加载 % JAVA HOME% lib 下的 iar 包和 cass 文件&lt;/li&gt;
&lt;li&gt;ExtClassLoader 是 AppClassLoader 的父类加载器，负责加载 % JAVA HOME%/lib/ext 文件夹下的 jar 包和 class 类&lt;/li&gt;
&lt;li&gt;AppClassLoader 是自定义类加载器的父类，负责加载 lasspath 下的类文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;39-和的区别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#39-和的区别是什么&#34;&gt;#&lt;/a&gt; 39. #{} 和 ${} 的区别是什么？&lt;/h2&gt;
&lt;p&gt;#{} 是预编译处理、是占位符，${} 是字符串替换、是拼接符。&lt;/p&gt;
&lt;p&gt;Mybatis 在处理 #{} 时，会将 sql 中的 #{} 替换为？号，调用 PreparedStatement 来赋值&lt;/p&gt;
&lt;p&gt;Mybatis 在处理&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;mtext&gt;时，会将&lt;/mtext&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mtext&gt;中的&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;{}时，会将sql中的&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;会&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; {} 替换成变量的值，调用 Statement 来赋值&lt;/p&gt;
&lt;p&gt;使用 #{} 可以有效的防止 SQL 注入，提高系统安全性&lt;/p&gt;
&lt;h2 id=&#34;60-sychronized和reentrantlock的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#60-sychronized和reentrantlock的区别&#34;&gt;#&lt;/a&gt; 60. Sychronized 和 ReentrantLock 的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sychronized 是一个&lt;strong&gt;关键字&lt;/strong&gt;，ReentrantLock 是一个类&lt;/li&gt;
&lt;li&gt;Sychronized 会&lt;strong&gt;自动的加锁与释放锁&lt;/strong&gt;，ReentrantLock 需要程序员手动加锁与释放锁&lt;/li&gt;
&lt;li&gt;Sychronized 的底层是&lt;strong&gt; JVM 层面的锁&lt;/strong&gt;，ReentrantLock 是&lt;strong&gt; API 层面的锁&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sychronized 是&lt;strong&gt;非公平锁&lt;/strong&gt;，ReentrantLock&lt;strong&gt; 可以选择公平锁或非公平锁&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Sychronized 锁的是对象，锁信息保存在对象头中，ReentrantLock 通过代码中 int 类型的 state 标识来标识锁的状态&lt;/li&gt;
&lt;li&gt;Sychronized 底层有一个锁升级的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java类的加载过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java类的加载过程&#34;&gt;#&lt;/a&gt; Java 类的加载过程&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTYzOTEyL2FydGljbGUvZGV0YWlscy8xMTY2NDI1NTY=&#34;&gt;请你说说 Java 类的加载过程_说说类加载的流程 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是类的加载过程&lt;/li&gt;
&lt;li&gt;一个 Java 文件从编码完成到最终运行，一般会经历两个阶段：编译期、运行期。编译，即通过 javac 命令，将 Java 文件转化为二进制字节码文件，即.class 文件；运行，则是将.class 文件交给 JVM 执行。而本文所说的类加载过程就是将.class 文件中类的元信息加载进内存，创建 Class 对象并进行解析、初始化类变量等的过程&lt;br /&gt;
​    JVM 并不是一开始就会将所有的类加载到内存，而是用到某个类，才会去加载，只加载一次，后续会说到类的加载时机&lt;/li&gt;
&lt;li&gt;类加载详解&lt;/li&gt;
&lt;li&gt;类加载分为三个部分：&lt;strong&gt;加载、连接、初始化&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2.1 加载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        类的加载主要的职责为将.class 文件的二进制字节流读入内存 (JDK1.7 及之前为 JVM 内存，JDK1.8 及之后为本地内存)，并在堆内存中为之创建 Class 对象，作为.class 进入内存后的数据的访问入口。在这里只是读入二进制字节流，后续的验证阶段就是要拿二进制字节流来验证.class 文件，验证通过，才会将.class 文件转为运行时数据结构&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类的连接分为三个阶段：&lt;strong&gt;验证、准备、解析&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;验证&lt;/strong&gt;：该阶段主要是为了保证加载进来的字节流符合 JVM 的规范，不会对 JVM 有安全性问题。其中有对元数据的验证，例如检查类是否继承了被 final 修饰的类；还有对符号引用的验证，例如校验符号引用是否可以通过全限定名找到，或者是检查符号引用的权限 (private、public) 是否符合语法规定等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备&lt;/strong&gt;：准备阶段的主要任务是为类的类变量开辟空间并赋默认值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静态变量是基本类型（int、long、short、char、byte、boolean、float、double）的默认值为 0&lt;/li&gt;
&lt;li&gt;静态变量是引用类型的，默认值为 null&lt;/li&gt;
&lt;li&gt;静态常量默认值为声明时设定的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如：public static final int i = 3; 在准备阶段，i 的值即为 3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析&lt;/strong&gt;：该阶段的主要职责为将 Class 在常量池中的符号引用转变为直接引用，此处针对的是静态方法及属性和私有方法与属性，因为这类方法与私有方法不能被重写，静态属性在运行期也没有多态这一说，即在编译器可知，运行期不可变，所以适合在该阶段解析，譬如类方法 main 替换为直接引用，为静态连接，区别于运行时的动态连接 (后续我会写关于 JVM 内存结构的文章，在讲解栈帧时会介绍动态链接)。&lt;/p&gt;
&lt;p&gt;符号引用即字符串，说白了可以是一个字段名，或者一个方法名；直接引用即偏移量，说白了就是类的元信息位于内存的地址串，例如，一个类的方法为 test ()，则符号引用即为 test，这个方法存在于内存中的地址假设为 0x123456，则这个地址则为直接引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该阶段主要是为类的类变量初始化值的，初始化有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在声明类变量时，直接给变量赋值&lt;/li&gt;
&lt;li&gt;在静态初始化块为类变量赋值&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;java锁有哪些sychronized是什么锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java锁有哪些sychronized是什么锁&#34;&gt;#&lt;/a&gt; java 锁有哪些，Sychronized 是什么锁&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmdjaGVuc3VpeXVlL2FydGljbGUvZGV0YWlscy8xMDg3MTY0NjY=&#34;&gt;Java 中常见的各种锁（非常全）_java 滑块锁 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240802153419417.png&#34; alt=&#34;image-20240802153419417&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;线程创建方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程创建方式&#34;&gt;#&lt;/a&gt; 线程创建方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方式一：继承于 Thread 类&lt;/li&gt;
&lt;li&gt;方式二：实现 Runnable 接口&lt;/li&gt;
&lt;li&gt;方式三：实现 Callable 接口&lt;/li&gt;
&lt;li&gt;方式四：使用线程池&lt;/li&gt;
&lt;li&gt;方式五：使用匿名类&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据结构&#34;&gt;#&lt;/a&gt; 数据结构&lt;/h1&gt;
&lt;h2 id=&#34;跳表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跳表&#34;&gt;#&lt;/a&gt; 跳表&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FwcGxlZWF0aW5nYm95L2FydGljbGUvZGV0YWlscy8xMTk5NDgzNDA=&#34;&gt;跳表的原理与实现 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;将&lt;strong&gt;单链表先进行排序&lt;/strong&gt;，然后针对 &lt;strong&gt;有序链表&lt;/strong&gt; 为了实现高效的查找，可以使用跳表这种数据结构。&lt;/p&gt;
&lt;p&gt;其根本思想是 &lt;strong&gt;二分查找&lt;/strong&gt; 的思想。&lt;/p&gt;
&lt;p&gt;跳表的前提条件是 针对 &lt;strong&gt;有序的单链表&lt;/strong&gt; ，实现高效地查找，插入，删除。&lt;/p&gt;
&lt;p&gt;Redis 中的 有序集合 &lt;strong&gt;sorted set&lt;/strong&gt; 就是用跳表实现的。&lt;/p&gt;
&lt;h1 id=&#34;mysql-redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-redis&#34;&gt;#&lt;/a&gt; MySQL、Redis&lt;/h1&gt;
&lt;h2 id=&#34;mysql索引实现有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql索引实现有哪些&#34;&gt;#&lt;/a&gt; MySQL 索引实现有哪些&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc2NzAxNS9hcnRpY2xlL2RldGFpbHMvMTE5MTA5Mzg1&#34;&gt;MySQL 索引的概念以及七种索引类型介绍_什么是数据库索引，mysql 常见的索引类型有哪些？-CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-索引的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-索引的概念&#34;&gt;#&lt;/a&gt; 1 索引的概念&lt;/h3&gt;
&lt;p&gt;索引（在 MySQL 中也叫做 “键（key）”）是存储引擎用于快速找到记录的一种数据结构，这也是索引最基本的功能。&lt;/p&gt;
&lt;p&gt;索引对于良好的性能非常关键。数据量越大时，索引对性能的影响也越重要，好的索引可以将查询性能提高几个数量级。在数据量较小且负载较低时，不恰当的索引对性能的影响可能还不明显，但是在数据量逐渐增大时，糟糕的索引会使 MySQL 的性能急剧的下降。&lt;/p&gt;
&lt;p&gt;索引优化是查询性能优化最有效的手段。&lt;/p&gt;
&lt;h3 id=&#34;2-索引的类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-索引的类型&#34;&gt;#&lt;/a&gt; 2 索引的类型&lt;/h3&gt;
&lt;p&gt;按照功能逻辑区分，MySQL 目前主要有以下索引类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主键索引&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数据列不允许重复，不允许为 NULL，一个表只能有一个主键。&lt;/li&gt;
&lt;li&gt;ALTER TABLE table_name ADD PRIMARY KEY (column);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;普通索引&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和 NULL 值。一个表允许多个列创建普通索引。&lt;/li&gt;
&lt;li&gt;ALTER TABLE table_name ADD INDEX index_name (column);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;唯一索引&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;索引列中的值必须是唯一的，但是允许 NULL 值。建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。一个表允许多个列创建唯一索引。&lt;/li&gt;
&lt;li&gt;ALTER TABLE table_name ADD UNIQUE (column);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全文索引&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;主要是为了快速检索大文本数据中的关键字的信息。字段长度比较大时，如果创建普通索引，在进行 like 模糊查询时效率比较低，这时可以创建全文索引，基于倒排索引，类似于搜索引擎。MyISAM 存储引擎支持全文索引，InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。&lt;/li&gt;
&lt;li&gt;ALTER TABLE table_name ADD FULLTEXT (column);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前缀索引&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在文本类型如 BLOB、TEXT 或者很长的 VARCHAR 列上创建索引时，可以使用前缀索引，数据量相比普通索引更小，可以指定索引列的长度，但是数值类型不能指定。&lt;/li&gt;
&lt;li&gt;ALTER TABLE table_name ADD KEY(column_name(prefix_length));&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合索引&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀原则。&lt;/li&gt;
&lt;li&gt;主键索引、普通索引、唯一索引等都可以使用多个字段形成组合索引。例如，ALTER TABLE table_name ADD INDEX index_name (column1, column2, column3);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间索引&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 在 5.7 之后的版本支持了空间索引，而且支持 OpenGIS 几何数据模型。MySQL 在空间索引这方面遵循 OpenGIS 几何数据模型规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql索引有哪些实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql索引有哪些实现方式&#34;&gt;#&lt;/a&gt; MySQL 索引有哪些实现方式&lt;/h3&gt;
&lt;p&gt;什么是 B+Tree 索引，B+Tree 索引的构建过程，跟二叉树、红黑树的对比&lt;/p&gt;
&lt;p&gt;为什么数据库存储用 B+tree 索引，局部性原理是什么，为什么推荐自增 id&lt;/p&gt;
&lt;p&gt;MySQL 有哪些索引，聚集索引，二级索引，覆盖索引区别，回表是什么&lt;/p&gt;
&lt;p&gt;怎么加索引，索引的使用场景有哪些，加索引一定好吗&lt;/p&gt;
&lt;p&gt;索引失效的场景，引发什么后果&lt;/p&gt;
&lt;p&gt;EXPLAIN 关键字查看 MySQL 是否使用索引&lt;/p&gt;
&lt;h2 id=&#34;23-b树和b树的区别为什么mysql使用b树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-b树和b树的区别为什么mysql使用b树&#34;&gt;#&lt;/a&gt; 23. B 树和 B + 树的区别，为什么 Mysql 使用 B + 树&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;B 树的特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点排序&lt;/li&gt;
&lt;li&gt;一个节点可以存多个元素，多个元素也排序了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;B + 树的特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有 B 例的特点&lt;/li&gt;
&lt;li&gt;子节点之间有指钊&lt;/li&gt;
&lt;li&gt;非叶子节点上的元素仙叶子节点上都冗余了，也就是叶子节点中存储了所有的元素，并且排好顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mysq 索引使用的是 B+，因为索引是用来加快查询的，而 B + 树通过对数据排序所以是可以提高查询速度的&lt;/p&gt;
&lt;p&gt;然后通过一个节点中可以有储多个元素，从而可以使得 B + 树的高度不会太高，在 Mysql 中一个 Innodb 页就是一个 B + 树节点，一 Innodb 页默认 16kb，所以一般情况下一颗两层的 B + 可以存 2000 万行左右的数&lt;/p&gt;
&lt;p&gt;然后通过利用 B + 树叶子节点存储了所有数据并且进行了排序，并且叶子节点之间有指针，以微了的支持全表描，范围查找等 SQL 语句&lt;/p&gt;
&lt;h2 id=&#34;38-mybatis的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#38-mybatis的优缺点&#34;&gt;#&lt;/a&gt; 38. Mybatis 的优缺点&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;优点:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 SOL 语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL 写在 XML 里，解除 sql 与程序代码的耦合，便于统一管理；提供 XML 标签，支持编写动态 SQL 语句，并可重用。&lt;/li&gt;
&lt;li&gt;与 JDBC 相比，减少了 50% 以上的代码量，消除了 JDBC 大量几余的代码，不需要手动开关连接；&lt;/li&gt;
&lt;li&gt;很好的与各种数据库兼容 (因为 MyBatis 使用 JDBC 来连接数据库，所以只要 JDBC 支持的数据库 MyBatis 都支持)&lt;/li&gt;
&lt;li&gt;能够与 Spring 很好的集成&lt;/li&gt;
&lt;li&gt;提供映射标签，支持对象与数据库的 ORM 字段关系映射，提供对象关系映射标签，支持对象关系组件维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL 语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写 SQL 语句的功底有一定要求&lt;/li&gt;
&lt;li&gt;SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;40-mysql慢查询该如何优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#40-mysql慢查询该如何优化&#34;&gt;#&lt;/a&gt; 40. Mysql 慢查询该如何优化？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;检查是否走了索引，如果没有则优化 SQL 利用索引&lt;/li&gt;
&lt;li&gt;检查所利用的索引，是否是最优索引&lt;/li&gt;
&lt;li&gt;检查所查字段是否都是必须的，是否查询了过多字段，查出了多余数据检查表中数据是否过多，是否应该进行分库分表了&lt;/li&gt;
&lt;li&gt;检查数据库实例所在机器的性能配置，是否太低，是否可以适当增加资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;41-mysql锁有哪些如何理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-mysql锁有哪些如何理解&#34;&gt;#&lt;/a&gt; 41. Mysql 锁有哪些，如何理解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;按锁粒度分类
&lt;ul&gt;
&lt;li&gt;行锁：锁某行数据，锁粒度最小，并发度高&lt;/li&gt;
&lt;li&gt;表锁：锁整张表，锁粒度最大，并发度低&lt;/li&gt;
&lt;li&gt;间隙锁：锁的是一个区间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读写分类
&lt;ul&gt;
&lt;li&gt;共享锁：也就是读锁。一个事务给某行数据加了读锁，其他事务也可以读，但是不能写&lt;/li&gt;
&lt;li&gt;排它锁：也就是写锁，一个事务给某行数据加了写锁，其他事务不能读，也不能写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;还可以分为
&lt;ul&gt;
&lt;li&gt;乐观锁：并不会真正的去锁某行记录，而是通过一个版本号来实现的&lt;/li&gt;
&lt;li&gt;悲观锁：上面所的行锁、表锁等都是悲观锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在事务的隔离级别实现中，就需要利用锁来解决幻读&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;42-redis和mysql如何保证数据一致&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-redis和mysql如何保证数据一致&#34;&gt;#&lt;/a&gt; 42. Redis 和 Mysql 如何保证数据一致&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先更新 Mysql，再更新 Redis&lt;/strong&gt;，如果更新 Redis 失败，可能仍然不一致&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;先删除 Redis 存数据，再更新 Mysql&lt;/strong&gt;，再次查询的时候在将数据添加到存中，这种方案能解决 1 方案的问题，但是在高并发下性能较低，而且仍然会出现数据不一致的问题，比如线程 1 删除了 Redis 缓存数据，正在更新 Mysql，此时另外一个查询再查询，那么就会把 Mysql 中老数据又查到 Redis 中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延时双删&lt;/strong&gt;，步骤是：先删除 Redis 存数据，再更新 Mysql，延几百毫秒再删除 Redis 存数据，这样就算在更新 Mysql 时，有其他线程读了 Mysql，把老教据读到了 Redis 中，那么也会被删除掉，从而把数据保持一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;43-redis有哪些数据结构-分别有哪些典型的应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-redis有哪些数据结构-分别有哪些典型的应用场景&#34;&gt;#&lt;/a&gt; 43. Redis 有哪些数据结构？分别有哪些典型的应用场景？&lt;/h2&gt;
&lt;p&gt;Redis 的数据结构有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字符串 string&lt;/strong&gt;: 可以用来做最简单的数，可以存某个简单的字符串，也可以存某个 json 格式的字符审，Redis 分布式锁的实现就利用了这种数结构，还包括可以实现计数器、Session 共享、分布式 ID&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;哈希表 hash&lt;/strong&gt;: 可以用来存储一些 key-value 对，更适合用来存储对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列表 list&lt;/strong&gt;: Redis 的列表通过命令的组合，既可以当做栈，也可以当做队列来使用，可以用来缓存类似微信公众号、微博等消息流数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合 set&lt;/strong&gt;: 和列表类似，也可以存储多个元素，但是不能重复，集合可以进行交集、并集、差集操作，从而可以实现类似，我和某人共同关注的人、朋友圈点赞等功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有序集合 zset&lt;/strong&gt;: 集合是无序的，有序集合可以设置顺序，可以用来实现排行榜功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mvcc机制rc级别解决脏读问题rr级别怎么解决不可重复读问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvcc机制rc级别解决脏读问题rr级别怎么解决不可重复读问题&#34;&gt;#&lt;/a&gt; MVCC 机制，RC 级别解决脏读问题，RR 级别怎么解决不可重复读问题&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RyYWNreGlhb3hpbjMyMS9hcnRpY2xlL2RldGFpbHMvMTIyMTU3MTcx&#34;&gt;一图看懂 MVCC 机制，RC 级别解决脏读问题，RR 级别怎么解决不可重复读问题【MySQL 系列】_mvcc 实现 rr 和读提交 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脏读是怎么产生的&lt;/strong&gt;，即事务 A 更改了某条数据，事务 B 读取，随后事务因为某些原因回滚了，此时事务 B 读的数据就是 “脏数据”，称为脏读。产生脏读的原因也很简单，事务 B 读取了事务 A 未提交的数据。因此读已提交（只能读取事务提交后的数据）能解决脏读问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可重复读问题&lt;/strong&gt;，是事务 A 读取了某条数据，随后事务 B 更改了这条数据，事务 A 再次读取，发现数据不一致了（即使读已提交，也不能解决不可重复读问题，因为事务 B 如果已经提交了事务，此时读已提交隔离级别下是可以读到的，这里也涉及到了 MVCC 机制，后面会详细讲），因此读已提交解决不了不可重复读问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVCC&lt;/strong&gt;（Mutil-Version Concurrency Control）多版本并发控制机制，实现了 MySQL 在 InnoDB 引擎下 RC 级别和 RR 级别下对数据库的并发访问，每次 select 操作会访问数据库中的版本链记录，其他事务可以修改这条记录，而 select 根据当前隔离级别去版本链中找到对应的版本记录，实现了读 - 写，写 - 读的并发执行，提升了系统的性能。&lt;/p&gt;
&lt;p&gt;先解析三个概念，&lt;strong&gt;当前读、快照读和 ReadView&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当前读&lt;/strong&gt;：读的都是最新版本的数据，会对数据进行加锁操作，防止其他事务修改当前数据。是悲观锁的一种实现方式。insert、update、select …for update、select…lock in share mode 都是当前读；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快照读&lt;/strong&gt;：最普通的不加锁的 select 读到的数据，读到的不一定是最新数据，有可能是之前历史版本的数据；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ReadView&lt;/strong&gt;：快照读的一种形式，MySQL 执行 MVCC 提取数据的依据；本质是一个数据结构，其中包括几下几个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;m_ids：当前活跃的事务 ID 集合（开启但未提交的事务 ID）；&lt;/li&gt;
&lt;li&gt;min_trx_ids: 最小活跃事务 ID，小于它说明事务已经提交；&lt;/li&gt;
&lt;li&gt;max_trx_ids: 预分配的事务 ID（下一个事务开启分配的事务 ID），即当前最大事务 ID+1；大于它说明该事物是 ReadView 生成之后才开启；&lt;/li&gt;
&lt;li&gt;creator_trx_id:ReadView 创建者的事务编号；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;版本链&lt;/strong&gt;：MySQL 数据库中，每条数据除肉眼可见的数据之外，还有几个隐藏字段：&lt;br /&gt;
1.db_trx_id: 记录最近修改这条记录的事务 ID；&lt;br /&gt;
2.db_roll_pointer: 回滚指针，指向指向这条数据的上一个版本记录；&lt;br /&gt;
3.db_row_id: 隐藏的自增 ID（隐藏的自增主键），如果表没有主键，InnoDB 会自动以 db_row_id 生成主键索引；&lt;/p&gt;
&lt;p&gt;实际上，RC 和 RR 两个隔离级别，实现的主要区别在于 ReadView 的时机不一样，RC 隔离级别下，每次快照读都会生成一个 ReadView；而 RR 级别下，只有在第一次快照读时生成 ReadView，后面会延续使用；事务根据生成的 ReadView 去版本链中寻找自己能够访问的数据，最后得到所读的数据；而这个寻找可读数据的规则就至关重要了。&lt;/p&gt;
&lt;h2 id=&#34;redis-16-个常见使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-16-个常见使用场景&#34;&gt;#&lt;/a&gt; Redis 16 个常见使用场景&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fnb25pZTIwMTIxOC9hcnRpY2xlL2RldGFpbHMvMTIzNjQwODcx&#34;&gt;Redis 16 个常见使用场景_redis 用途 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;分布式锁redisson的使用看门狗机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式锁redisson的使用看门狗机制&#34;&gt;#&lt;/a&gt; 分布式锁 Redisson 的使用，看门狗机制&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY5MTk0Mi9hcnRpY2xlL2RldGFpbHMvMTA3NTkxMTM3&#34;&gt;分布式锁 Redisson 的使用，看门狗机制_分布式锁使用了啥，看门狗机制，锁的默认超时时间是多少 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何使用redis做一个定时任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用redis做一个定时任务&#34;&gt;#&lt;/a&gt; 如何使用 redis 做一个定时任务？&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1c2h1YW5naGFvMTIzL2FydGljbGUvZGV0YWlscy8xMTM4NTc4NjI=&#34;&gt;如何使用 redis 做一个定时任务？_redis 定时任务 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;spring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt; Spring&lt;/h1&gt;
&lt;h2 id=&#34;21-applicationcontext和beanfactory有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-applicationcontext和beanfactory有什么区别&#34;&gt;#&lt;/a&gt; 21. ApplicationContext 和 BeanFactory 有什么区别&lt;/h2&gt;
&lt;p&gt;BeanFactory 是 Spring 中非常核心的组件，表示 Bean 工厂，可以生成 bean，维护 bean，&lt;/p&gt;
&lt;p&gt;而 ApplicationContxt 继承了 Beanfactory，所以具有 BeanFactory 的特点。&lt;/p&gt;
&lt;p&gt;ApplicationContext 除了继承 BeanFactory 之外，还继承了诸如 EnvironmentCapable、MessageSource、ApplicationEventPublisher 等接口，从而 ApplicationContext 还有获取系统环境变量、国际化、事件发布等功能，这是 BeanFactory 不具备的。&lt;/p&gt;
&lt;h2 id=&#34;48-spring-boot是如何启动tomcat的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#48-spring-boot是如何启动tomcat的&#34;&gt;#&lt;/a&gt; 48. Spring Boot 是如何启动 Tomcat 的&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先，SpringBoot 在启动时会先创建一个 Spring 容器&lt;/li&gt;
&lt;li&gt;在创建 Spring 容器时程中，会 @ConditionalOnClass 技术来判新当前 classpath 中是否存在 Tomcat 依赖，如果存在会生成一个启动 Tomcat 的 Bean&lt;/li&gt;
&lt;li&gt;Spring 容器创建完之后，就会获取启动 Tomcat 的 Bean，并创建 Tomcat 对象，并绑定端口等，然后启动 Tomcat&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;49-spring-boot中常用注解及其底层实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#49-spring-boot中常用注解及其底层实现&#34;&gt;#&lt;/a&gt; 49. Spring Boot 中常用注解及其底层实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@SpringBootApplication&lt;/strong&gt; 注解：这个注解标识了一个 SpringBoot 工程，它实际上是另外三个注解的组合，这三个注解是:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@SpringBootConfiquration&lt;/strong&gt;: 这个注解实际就是一个 @Configuration，表示启动类也是一个配置类&lt;/li&gt;
&lt;li&gt;@&lt;strong&gt;EnableAutoConfiquration&lt;/strong&gt;: 向 Spring 容器中导入了一个 Selector，用来加载 ClassPath 下 SpringFatories 中所定义的自动配置类，将这些自动动载为配置 Bean&lt;/li&gt;
&lt;li&gt;@&lt;strong&gt;ComponentScan&lt;/strong&gt;: 标识扫描路径，因为默认是没有配置实际扫描路径，所以 SpringBoot 扫描的路径是启动类所在的当前目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@&lt;strong&gt;Bean&lt;/strong&gt; 注解：用来定义 Bean，类似于 XML 中的 bean &amp;gt; 标签，Spring 在启动时，会对加了 @Bean 注解的方法进行解折，将方法的名字做为 beanName，并通过执行方法得到 bean 对象&lt;/li&gt;
&lt;li&gt;@&lt;strong&gt;Controller&lt;/strong&gt;、@&lt;strong&gt;Service&lt;/strong&gt;、 @&lt;strong&gt;ResponseBody&lt;/strong&gt;、@&lt;strong&gt;Autowired&lt;/strong&gt; 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;52-spring-优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-spring-优点&#34;&gt;#&lt;/a&gt; 52. Spring 优点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;轻量级&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制反转（IOC）&lt;/strong&gt;、依赖注入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;切片编程（AOP）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MVC 框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可拓展性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring-ioc的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-ioc的理解&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Spring IOC 的理解&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;控制反转&lt;/p&gt;
&lt;p&gt;整个 IOC 容器创建的流程和步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向 bean 工厂中设置一些参数&lt;/li&gt;
&lt;li&gt;加载解析 bean 对象&lt;/li&gt;
&lt;li&gt;BeanPostProcessor 的注册功能&lt;/li&gt;
&lt;li&gt;通过反射的方式讲 BeanDefinition 对象实例化成具体的 bean 对象&lt;/li&gt;
&lt;li&gt;bean 对象的初始化过程&lt;/li&gt;
&lt;li&gt;生成完整的 bean 对象&lt;/li&gt;
&lt;li&gt;通过 getBean 方法可以直接获取&lt;/li&gt;
&lt;li&gt;销毁过程&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring-aop的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-aop的理解&#34;&gt;#&lt;/a&gt; &lt;strong&gt;spring AOP 的理解&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;面向切面编程（AOP）：允许程序员模块化横向业务逻辑，或定义核心部分的功能，例如&lt;strong&gt;日志管理和事务管理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 Spring AOP 中，切面通过带有 **@Aspect** 注解的类实现&lt;/p&gt;
&lt;p&gt;通知 (Advice)：通知表示在方法执行前后需要执行的动作。实际上它是 Spring AOP 框架在程序执行过程中触发的一些代码。有前置通知、后置通知、环绕通知等&lt;/p&gt;
&lt;p&gt;动态代理：代理是将通知应用到目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。&lt;/p&gt;
&lt;h2 id=&#34;事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;事务是逻辑上的一组操作，要么都执行，要么都不执行。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务的特性acid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务的特性acid&#34;&gt;#&lt;/a&gt; &lt;strong&gt;事务的特性（ACID）&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;原子性&lt;/strong&gt;（ &lt;code&gt;Atomicity&lt;/code&gt; ）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;（ &lt;code&gt;Consistency&lt;/code&gt; ）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（ &lt;code&gt;Isolation&lt;/code&gt; ）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性&lt;/strong&gt;（ &lt;code&gt;Durability&lt;/code&gt; ）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;🌈 这里要额外补充一点：&lt;strong&gt;只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务管理&#34;&gt;#&lt;/a&gt; &lt;strong&gt;事务管理&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编程式事务管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过  &lt;code&gt;TransactionTemplate&lt;/code&gt;  或者 &lt;code&gt;TransactionManager&lt;/code&gt;  手动管理事务，实际应用中很少使用&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;声明式事务管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐使用（代码侵入性最小），实际是通过 AOP 实现（基于 &lt;code&gt;@Transactional&lt;/code&gt;  的全注解方式使用最多）。&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;@Transactional&lt;/code&gt;  注解进行事务管理的示例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Transactional&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;propagation &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Propagation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;REQUIRED&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; aMethod &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//do something&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;B&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;C&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  b&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;54-spring-事务什么时候会失效&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#54-spring-事务什么时候会失效&#34;&gt;#&lt;/a&gt; 54. Spring 事务什么时候会失效？&lt;/h2&gt;
&lt;p&gt;spring 事务的原理是 AOP，进行了切面增强，那么失效的根本原因是这个 AOP 不起作用了！常见情况有如下几种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发生自调用，类里面使用 this 调用本类的方法 (this 通常省略)，此时这个 this 对象不是代理类，而是 UserService 对象本身！&lt;/li&gt;
&lt;li&gt;解决方法很简单，让那个 this 变成 UserService 的代理类即可！&lt;/li&gt;
&lt;li&gt;方法不是 public 的: @Transactional 只能用于 public 的方法上，否则事务不会失效，如果要用在非 public 法上，可以开启 AspectJ 代理模式&lt;/li&gt;
&lt;li&gt;数据库不支持事务&lt;/li&gt;
&lt;li&gt;没有被 spring 管理&lt;/li&gt;
&lt;li&gt;异常被吃掉，事务不会回滚 (或者抛出的异常没有被定义，默认为 RuntimeException)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;55-spring中bean是线程安全的吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#55-spring中bean是线程安全的吗&#34;&gt;#&lt;/a&gt; 55. Spring 中 Bean 是线程安全的吗&lt;/h2&gt;
&lt;p&gt;Spring 本身并没有针对 Bean 做线程安全的处理，所以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 Bean 是无状态的，那么 Bean 则是线程安全的&lt;/li&gt;
&lt;li&gt;如果 Bean 是有状态的，那么 Bean 则不是线程安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，Bean 是不是线程安全，跟 Bean 的作用域没有关系，Bean 的作用域只是表示 Bean 的生命周期范围，对于任何生命固期的 Bean 都是一个对象，这个对象是不是线程安全的，还是得看这个 Bean 对象本身。&lt;/p&gt;
&lt;p&gt;tips：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有状态对象 (Stateful Bean)&lt;/strong&gt; ：就是 ** 有实例变量的对象，可以保存数据，是非线程安全的。** 每个用户有自己特有的一个实例，在用户的生存期内，bean 保持了用户的信息，即 “有状态”；一旦用户灭亡（调用结束或实例结束），bean 的生命期也告结束。即每个用户最初都会得到一个初始的 bean。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无状态对象 (Stateless Bean)&lt;/strong&gt;：就是 ** 没有实例变量的对象，不能保存数据，是不变类，是线程安全的。**bean 一旦实例化就被加进会话池中，各个用户都可以共用。即使用户已经消亡，bean 的生命期也不一定结束，它可能依然存在于会话池中，供其他用户调用。由于没有特定的用户，那么也就不能保持某一用户的状态，所以叫无状态 bean。但无状态会话 bean 并非没有状态，如果它有自己的属性（变量），那么这些变量就会受到所有调用它的用户的影响，这是在实际应用中必须注意的。&lt;/p&gt;
&lt;h2 id=&#34;spring-configuration注解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-configuration注解&#34;&gt;#&lt;/a&gt; Spring @Configuration 注解&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlb3h5ay9hcnRpY2xlL2RldGFpbHMvNzk4MDAwMjA=&#34;&gt;Spring @Configuration 注解_springconfiguration 注解 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;Spring3.0&lt;/code&gt; ， &lt;code&gt;@Configuration&lt;/code&gt;  用于定义配置类，可替换 &lt;code&gt;xml&lt;/code&gt;  配置文件，被注解的类内部包含有一个或多个被 &lt;code&gt;@Bean&lt;/code&gt;  注解的方法，这些方法将会被 &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;  或 &lt;code&gt;AnnotationConfigWebApplicationContext&lt;/code&gt;  类进行扫描，并用于构建 &lt;code&gt;bean&lt;/code&gt;  定义，初始化 &lt;code&gt;Spring&lt;/code&gt;  容器。&lt;/p&gt;
&lt;p&gt;注意： &lt;code&gt;@Configuration&lt;/code&gt;  注解的配置类有如下要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@Configuration 不可以是 &lt;code&gt;final&lt;/code&gt;  类型；&lt;/li&gt;
&lt;li&gt;@Configuration 不可以是匿名类；&lt;/li&gt;
&lt;li&gt;嵌套的 configuration 必须是静态类。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring中bean及bean的理解与new对象的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring中bean及bean的理解与new对象的区别&#34;&gt;#&lt;/a&gt; Spring 中 Bean 及 @Bean 的理解与 new 对象的区别&lt;/h2&gt;
&lt;p&gt;spring 有一个 Ioc 容器：Spring 容器是 Spring 框架的核心。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。Spring 容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为 Spring Beans。 一些对象创建和使用完毕之后不会被销毁，放进对象池（某种集合）以备下次使用，下次再需要这个对象，不 new，直接从池里取，节省时间，也就是说我们可以随时使用和销毁。&lt;/p&gt;
&lt;p&gt;同理 Spring 的 @Bean 注解用于告诉方法，产生一个 Bean 对象，然后这个 Bean 对象交给 Spring 管理。产生这个 Bean 对象的方法 Spring 只会调用一次，随后这个 Spring 将会将这个 Bean 对象放在自己的 IOC 容器中。&lt;/p&gt;
&lt;p&gt;而使用 new 关键字创建的对象属于强引用对象，所谓强引用，就是 jvm 垃圾回收机制永远不会回收这类对象，这时候需要手动移除引用。如果没有移除，这个对象将一直存在，久而久之，会引起内存泄露问题。&lt;/p&gt;
&lt;p&gt;垃圾回收 (Garbage Collection) 是 Java 虚拟机 (JVM) 垃圾回收器提供的一种用于在空闲时间不定时回收无任何对象引用的对象占据的内存空间的一种机制。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   强引用（Strong Reference）：如“Object obj = new Object（）”，这类引用是Java程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。

  new对象是因为类的构造方法一旦被修改，new的对象就出错了，如果是用了spring，就不用理会构造方法是否被修改，而拿来用就可以。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总的来说：Bean 和 new 但是创建对象，但是 Bean 所创建的对象会集中放在一个容器中方便管理&lt;/p&gt;
&lt;h2 id=&#34;autowired-与resource的区别详细&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autowired-与resource的区别详细&#34;&gt;#&lt;/a&gt; @Autowired 与 @Resource 的区别（详细）&lt;/h2&gt;
&lt;p&gt;@Resource 的作用相当于 @Autowired，只不过 **@Autowired 按 byType 自动注入 **，而 **@Resource 默认按 byName 自动注入 ** 罢了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Resource 有两个属性是比较重要的，分是 name 和 type&lt;/strong&gt;，Spring 将 @Resource 注解的 name 属性解析为 bean 的名字，而 type 属性则解析为 bean 的类型。所以如果使用 name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。如果既不指定 name 也不指定 type 属性，这时将通过反射机制使用 byName 自动注入策略。&lt;/p&gt;
</content>
        <category term="Java" />
        <updated>2024-07-14T01:56:54.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/06/23/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
        <title>第二次面试准备</title>
        <link rel="alternate" href="http://example.com/2024/06/23/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
        <content type="html">&lt;h1 id=&#34;第二次面试准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二次面试准备&#34;&gt;#&lt;/a&gt; 第二次面试准备&lt;/h1&gt;
&lt;p&gt;我的简历，又又又优化了一下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240623164731985.png&#34; alt=&#34;image-20240623164731985&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;了解一下公司&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#了解一下公司&#34;&gt;#&lt;/a&gt; 了解一下公司&lt;/h2&gt;
&lt;h3 id=&#34;公司介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公司介绍&#34;&gt;#&lt;/a&gt; 公司介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;云行计划技术布道者&lt;/li&gt;
&lt;li&gt;成立于 2009 年，坐落于杭州湾畔，我们自认为是中国比较优秀的互联网服务提供商。自成立以来，专注于&lt;strong&gt;云计算技术、移动互联应用、B/S 架构系统研发&lt;/strong&gt;，为企业客户的互联网应用提供一站式服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（来自 boss）&lt;/p&gt;
&lt;h3 id=&#34;官网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官网&#34;&gt;#&lt;/a&gt; 官网&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240623165735071.png&#34; alt=&#34;image-20240623165735071&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个地方加载的很慢，如何优化&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20240623165917959.png&amp;quot; alt=&amp;quot;image-20240623165917959&amp;quot;/&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;岗位要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#岗位要求&#34;&gt;#&lt;/a&gt; 岗位要求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;扎实的 Java&lt;/li&gt;
&lt;li&gt;熟练使用 Linux&lt;/li&gt;
&lt;li&gt;熟练 Mysql、PostgreSQL&lt;/li&gt;
&lt;li&gt;Spring、Dubbo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自我介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我介绍&#34;&gt;#&lt;/a&gt; 自我介绍&lt;/h2&gt;
&lt;h2 id=&#34;项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目&#34;&gt;#&lt;/a&gt; &lt;strong&gt;项目&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础知识&#34;&gt;#&lt;/a&gt; 基础知识&lt;/h2&gt;
&lt;h3 id=&#34;redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt; Redis&lt;/h3&gt;
&lt;p&gt;见 面试准备一 以及 Redis 学习记录&lt;/p&gt;
&lt;h3 id=&#34;linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt; Linux&lt;/h3&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3 id=&#34;java&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; Java&lt;/h3&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3 id=&#34;spring-postgresql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-postgresql&#34;&gt;#&lt;/a&gt; Spring、&lt;s&gt;PostgreSQL&lt;/s&gt;&lt;/h3&gt;
&lt;h4 id=&#34;什么是spring框架spring框架有哪些主要模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是spring框架spring框架有哪些主要模块&#34;&gt;#&lt;/a&gt; 什么是 Spring 框架？Spring 框架有哪些主要模块？&lt;/h4&gt;
&lt;p&gt;Spring 是一个&lt;strong&gt;轻量级的 JavaEE 框架&lt;/strong&gt;，它主要解决企业应用中的复杂性问题。&lt;/p&gt;
&lt;p&gt;Spring 框架有三个核心部分: &lt;strong&gt;lOC 容器、AOP 和数据访问 / 集成层。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;lOC 容器提供了一种对象创建和对象之间关系管理的机制，以实现松散耦合和可扩展性，&lt;/p&gt;
&lt;p&gt;AOP 提供了一种很好的方式来实现横向关注点的处理，如事务管理，安全检查，缓存等。&lt;/p&gt;
&lt;p&gt;数据访问 / 集成层则提供了许多针对不同数据持久化技术的实现，比如 JDBC，ORM 和 NoSQL。&lt;/p&gt;
&lt;p&gt;Spring 框架本身亦是按照设计模式精心打造，这使得我们可以在开发环境中安心的集成 Spring 框架，不必担心 Spring 是如何在后台进行工作的。spring 框架至今已集成了 20 多个模块。这些模块主要被分如下图所示的核心容器、数据访问 / 集成、Web、AOP (面向切面编程)、工具、消息和测试模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生态、基石&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240623192514857.png&#34; alt=&#34;image-20240623192514857&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;spring优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring优点&#34;&gt;#&lt;/a&gt; Spring 优点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;轻量级&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制反转（IOC）&lt;/strong&gt;、依赖注入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;切片编程（AOP）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MVC 框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可拓展性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;谈一下你对于springioc的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#谈一下你对于springioc的理解&#34;&gt;#&lt;/a&gt; 谈一下你对于 springIOC 的理解&lt;/h4&gt;
&lt;p&gt;控制反转&lt;/p&gt;
&lt;p&gt;整个 IOC 容器创建的流程和步骤如下：向 bean 工厂中设置一些参数、加载解析 bean 对象、BeanPostProcessor 的注册功能、通过反射的方式讲 BeanDefinition 对象实例化成具体的 bean 对象、bean 对象的初始化过程、生成完整的 bean 对象，通过 getBean 方法可以直接获取、销毁过程&lt;/p&gt;
&lt;h4 id=&#34;bean的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bean的生命周期&#34;&gt;#&lt;/a&gt; bean 的生命周期&lt;/h4&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h4 id=&#34;自动装配的各种模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动装配的各种模式&#34;&gt;#&lt;/a&gt; 自动装配的各种模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;byName&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;byType、constructor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;autodetect、no&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;beanfactory和applicationcontext有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#beanfactory和applicationcontext有什么区别&#34;&gt;#&lt;/a&gt; BeanFactory 和 ApplicationContext 有什么区别？&lt;/h4&gt;
&lt;p&gt;加载：BeanFactory 采用的是 ** 延迟加载（lazy-loading）** 的方式，即只有在使用到某个 Bean 时 才会对该 Bean 进行加载和实例化。而 ApplicationContext 则是在容器启动 时，&lt;strong&gt;一次性创建所有的 Bean&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;创建：BeanFactory 通常以&lt;strong&gt;编程的方式创建&lt;/strong&gt;，需要手动编写代码来配置和获取 Bean。而 ApplicationContext 除了支持编程方式创建外，还支持&lt;strong&gt;声明方式创建&lt;/strong&gt;，如使用 XML 配置文件或注解 来配置 Bean。&lt;/p&gt;
&lt;p&gt;功能：ApplicationContext 接口作为 BeanFactory 的&lt;strong&gt;派生&lt;/strong&gt;，不仅提供了 BeanFactory 所具有的功 能，还提供了更完整的框架功能。&lt;/p&gt;
&lt;h4 id=&#34;spring-aop的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-aop的理解&#34;&gt;#&lt;/a&gt; spring AOP 的理解&lt;/h4&gt;
&lt;p&gt;面向切面编程（AOP）：允许程序员模块化横向业务逻辑，或定义核心部分的功能，例如&lt;strong&gt;日志管理和事&lt;/strong&gt; 务管理。&lt;/p&gt;
&lt;p&gt;在 Spring AOP 中，切面通过带有 **@Aspect** 注解的类实现&lt;/p&gt;
&lt;p&gt;通知 (Advice)：通知表示在方法执行前后需要执行的动作。实际上它是 Spring AOP 框架在程序执行过程 中触发的一些代码。有前置通知、后置通知、环绕通知等&lt;/p&gt;
&lt;p&gt;动态代理：代理是将通知应用到目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样 的。&lt;/p&gt;
&lt;h4 id=&#34;spring中用到了哪些设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring中用到了哪些设计模式&#34;&gt;#&lt;/a&gt; spring 中用到了哪些设计模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单例模式：bean 默认都是单例的&lt;/li&gt;
&lt;li&gt;原型模式：指定作用域为 prototype&lt;/li&gt;
&lt;li&gt;工厂模式：BeanFactory&lt;/li&gt;
&lt;li&gt;模板方法：postProcessBeanFactory,onRefresh,initPropertyValue&lt;/li&gt;
&lt;li&gt;策略模式：XmlBeanDefinitionReader,PropertiesBeanDefinitionReader&lt;/li&gt;
&lt;li&gt;观察者模式：listener，event，multicast&lt;/li&gt;
&lt;li&gt;适配器模式：Adapter&lt;/li&gt;
&lt;li&gt;装饰者模式：BeanWrapper&lt;/li&gt;
&lt;li&gt;责任链模式：使用 aop 的时候会先生成一个拦截器链&lt;/li&gt;
&lt;li&gt;代理模式：动态代理&lt;/li&gt;
&lt;li&gt;委托者模式：delegate&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;索引：b + 树、哈希、位图&lt;/li&gt;
&lt;li&gt;MySQL 优化：索引、查询优化（少子查询、模糊查询、全表查询）、表结构优化、缓存优化（Redis）、硬件优化&lt;/li&gt;
&lt;li&gt;慢查询：查询花费时间很多的日志&lt;/li&gt;
&lt;li&gt;死锁：避免大量查询、给事务加锁、增加悲观锁、设置合理超时时间&lt;/li&gt;
&lt;li&gt;优化大量数据插入：每一次插入的数量变多（合适数量），避免死锁，占用大量系统资源，磁盘空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dubbo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dubbo&#34;&gt;#&lt;/a&gt; &lt;s&gt;Dubbo&lt;/s&gt;&lt;/h3&gt;
&lt;p&gt;&lt;s&gt;随着互联网的发展，&lt;strong&gt;网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行&lt;/strong&gt;，亟需一个治理系统确保架构有条不紊的演进。&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;Apache Dubbo 最初是为了解决&lt;strong&gt;阿里巴巴内部的微服务架构问题&lt;/strong&gt;而设计并开发的，最早在 2008 年，阿里巴巴就将 Dubbo 捐献到开源社区。在 2017 年，Dubbo 被正式捐献 Apache 软件基金会并成为 Apache 顶级项目，开始了一段新的征程。&lt;/s&gt;&lt;/p&gt;
&lt;h4 id=&#34;为什么需要-dubbo它能做什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要-dubbo它能做什么&#34;&gt;#&lt;/a&gt; &lt;s&gt;为什么需要 Dubbo，它能做什么？&lt;/s&gt;&lt;/h4&gt;
&lt;p&gt;&lt;s&gt;按照微服务架构的定义，采用它的组织能够很好的提高业务迭代效率与系统稳定性，但前提是要先能保证微服务按照期望的方式运行，要做到这一点需要解决服务拆分与定义、数据通信、地址发现、流量管理、数据一致性、系统容错能力等一系列问题。&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;Dubbo 可以帮助解决如下微服务实践问题：&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;微服务编程范式和工具&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 支持基于 IDL 或语言特定方式的服务定义，提供多种形式的服务调用形式（如同步、异步、流式等）&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;高性能的 RPC 通信&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 帮助解决微服务组件之间的通信问题，提供了基于 HTTP、HTTP/2、TCP 等的多种高性能通信协议实现，并支持序列化协议扩展，在实现上解决网络连接管理、数据传输等基础问题。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;微服务监控与治理&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 官方提供的服务发现、动态配置、负载均衡、流量路由等基础组件可以很好的帮助解决微服务基础实践的问题。除此之外，您还可以用 Admin 控制台监控微服务状态，通过周边生态完成限流降级、数据一致性、链路追踪等能力。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;部署在多种环境&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 服务可以直接部署在容器、Kubernetes、Service Mesh 等多种架构下。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;活跃的社区&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 项目托管在 Apache 社区，有来自国际、国内的活跃贡献者维护着超 10 个生态项目，贡献者包括来自海外、阿里巴巴、工商银行、携程、蚂蚁、腾讯等知名企业技术专家，确保 Dubbo 及时解决项目缺陷、需求及安全漏洞，跟进业界最新技术发展趋势。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;庞大的用户群体&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo3 已在阿里巴巴成功落地，实现了对老版本 HSF2 框架全面升级，成为阿里集团面向云原生时代的统一服务框架底座，庞大的用户群体是 Dubbo 保持稳定性、需求来源、先进性的基础。&lt;/s&gt;&lt;/p&gt;
&lt;h4 id=&#34;dubbo-不是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dubbo-不是什么&#34;&gt;#&lt;/a&gt; &lt;s&gt;Dubbo 不是什么？&lt;/s&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不是应用开发框架的替代者&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 设计为让开发者以主流的应用开发框架的开发模式工作，它不是各个语言应用开发框架的替代者，如它不是 Spring/Spring Boot 的竞争者，当你使用 Spring 时，Dubbo 可以无缝的与 Spring &amp;amp; Spring Boot 集成在一起。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不仅仅只是一款 RPC 框架&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 提供了内置 RPC 通信协议实现，但它不仅仅是一款 RPC 框架。首先，它不绑定某一个具体的 RPC 协议，开发者可以在基于 Dubbo 开发的微服务体系中使用多种通信协议；其次，除了 RPC 通信之外，Dubbo 提供了丰富的服务治理能力与生态。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不是 gRPC 协议的替代品&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 支持基于 gRPC 作为底层通信协议，在 Dubbo 模式下使用 gRPC 可以带来更好的开发体验，享有统一的编程模型和更低的服务治理接入成本&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不只有 Java 语言实现&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;自 Dubbo3 开始，Dubbo 提供了 Java、Golang、Rust、Node.js 等多语言实现，未来会有更多的语言实现。&lt;/s&gt;&lt;/p&gt;
&lt;h2 id=&#34;知识拓展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#知识拓展&#34;&gt;#&lt;/a&gt; 知识拓展&lt;/h2&gt;
&lt;h2 id=&#34;引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbi5kdWJiby5hcGFjaGUub3JnL3poLWNuL292ZXJ2aWV3L3doYXQv&#34;&gt;Dubbo 介绍 | Apache Dubbo&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="面试" />
        <updated>2024-06-23T08:42:22.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/04/12/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
        <title>第一次面试准备</title>
        <link rel="alternate" href="http://example.com/2024/04/12/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;大概三月末的时候，学校有个招聘会，然后我投了几家。刚刚打电话，问我明早有没有时间远程面试&lt;/p&gt;
&lt;p&gt;没多想就答应了下来，这下好了，得回顾一下简历上写的东西了&lt;/p&gt;
&lt;p&gt;对的，很烂&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412121818555.png&#34; alt=&#34;image-20240412121818555&#34; /&gt;&lt;/p&gt;
&lt;p&gt;想着把 Redis 看一下（其实我还没学完，当时想着做简历就写上去了，而且最近在忙着比赛和打游戏，Java 这方面已经落下很多了）&lt;/p&gt;
&lt;p&gt;也许到时候可以把面试官往我最近比赛的方面引。&lt;/p&gt;
&lt;h1 id=&#34;可能的面试内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能的面试内容&#34;&gt;#&lt;/a&gt; 可能的面试内容&lt;/h1&gt;
&lt;p&gt;时间紧任务重，能准备的也不是很充分&lt;/p&gt;
&lt;h2 id=&#34;自我介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我介绍&#34;&gt;#&lt;/a&gt; &lt;s&gt;自我介绍&lt;/s&gt;&lt;/h2&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h2 id=&#34;redis项目的细节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis项目的细节&#34;&gt;#&lt;/a&gt; Redis 项目的细节 *&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;五种类型&lt;/p&gt;
&lt;p&gt;字符串、列表、hash、set、zset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久化策略&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存淘汰策略&lt;/p&gt;
&lt;p&gt;懒惰性删除 + 定期删除，懒惰性：用的时候才查是否过期。缺点：可能会有数据一直用不到，一直存在在内存。定期删除：定期删，缺点：遍历，时间长，内存压力大&lt;/p&gt;
&lt;p&gt;结合：抽取一部分定期删除 + 懒惰&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从、哨兵&lt;/p&gt;
&lt;p&gt;主服务器、从服务器，&lt;/p&gt;
&lt;p&gt;哨兵：监控、提醒、自动故障迁移、统一的配置管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他见 &lt;em&gt;Redis 学习记录&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-boot的相关知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot的相关知识&#34;&gt;#&lt;/a&gt; Spring boot 的相关知识&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412231410321.png&#34; alt=&#34;image-20240412231410321&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412231458213.png&#34; alt=&#34;image-20240412231458213&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;最近比赛的内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近比赛的内容&#34;&gt;#&lt;/a&gt; 最近比赛的内容&lt;/h2&gt;
&lt;p&gt;见 &lt;em&gt;A25&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt; Git&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412231950813.png&#34; alt=&#34;image-20240412231950813&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412232258004.png&#34; alt=&#34;image-20240412232258004&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;面后整理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面后整理&#34;&gt;#&lt;/a&gt; 面后整理&lt;/h1&gt;
&lt;h2 id=&#34;自我介绍-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我介绍-2&#34;&gt;#&lt;/a&gt; 自我介绍&lt;/h2&gt;
&lt;p&gt;阿巴阿巴&lt;/p&gt;
&lt;h2 id=&#34;问我什么项目提升最大redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问我什么项目提升最大redis&#34;&gt;#&lt;/a&gt; 问我什么项目提升最大（Redis）&lt;/h2&gt;
&lt;p&gt;我说了 Redis 的那个，介绍一下项目实现，因为没有开视频，我对着昨晚做的 Redis 讲 + 分布式锁&lt;/p&gt;
&lt;p&gt;（懂不懂一天速成 Redis 的含金量 后仰.jpg）&lt;/p&gt;
&lt;h2 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; Mysql&lt;/h2&gt;
&lt;p&gt;索引、having、group by&lt;/p&gt;
&lt;h2 id=&#34;mybatis配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis配置文件&#34;&gt;#&lt;/a&gt; MyBatis 配置文件&lt;/h2&gt;
&lt;p&gt;Mysql 配置，MyBatis 插件的配置类……&lt;/p&gt;
&lt;h2 id=&#34;spring-boot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot&#34;&gt;#&lt;/a&gt; Spring Boot&lt;/h2&gt;
&lt;p&gt;AOP（可恶，看了的没问，没看的忘了）&lt;/p&gt;
&lt;h2 id=&#34;java基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java基础&#34;&gt;#&lt;/a&gt; Java 基础&lt;/h2&gt;
&lt;p&gt;ArrayList 和 LinkedList 区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList 基于动态数组实现的非线程安全的集合；LinkedList 基于链表实现的非线程安全的集合。&lt;/li&gt;
&lt;li&gt;对于随机 index 访问的 get 和 set 方法，一般 ArrayList 的速度要优于 LinkedList。因为 ArrayList 直接通过数组下标直接找到元素；LinkedList 要移动指针遍历每个元素直到找到为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问我什么课感兴趣&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问我什么课感兴趣&#34;&gt;#&lt;/a&gt; 问我什么课感兴趣&lt;/h2&gt;
&lt;p&gt;我说了 Java + 操作系统 + 数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作系统&lt;/p&gt;
&lt;p&gt;银行家算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git工具&#34;&gt;#&lt;/a&gt; git 工具&lt;/h2&gt;
&lt;p&gt;常用命令&lt;/p&gt;
&lt;h2 id=&#34;最近比赛的内容-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近比赛的内容-2&#34;&gt;#&lt;/a&gt; 最近比赛的内容&lt;/h2&gt;
&lt;p&gt;因为我时不时提一嘴，我最近在打比赛，然后后面终于问了。&lt;strong&gt;之前在牛客学的精髓，引导面试官占据主导权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这我可太熟了，然后问我参数的意义&lt;/p&gt;
&lt;h2 id=&#34;由于涉及到ai问我ai对我们it行业的帮助&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#由于涉及到ai问我ai对我们it行业的帮助&#34;&gt;#&lt;/a&gt; 由于涉及到 AI，问我 AI 对我们 IT 行业的帮助&lt;/h2&gt;
&lt;p&gt;弱 AI，基于大数据而不是逻辑，所以只能辅助开发，而非独立开发&lt;/p&gt;
&lt;h2 id=&#34;结尾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结尾&#34;&gt;#&lt;/a&gt; 结尾&lt;/h2&gt;
&lt;p&gt;问了一下我的情况&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#感想&#34;&gt;#&lt;/a&gt; 感想&lt;/h2&gt;
&lt;p&gt;上次双选会，哥们就拿着之前做好的简历过去投，啥也没准备&lt;/p&gt;
&lt;p&gt;所以这一次算是第一次面试，昨天接到电话后一直在准备（虽然也玩了好些），但确实是半天速成 Redis，把敲代码的过程大部分跳了，然后关注原理，并记录。看完后昨晚看了一遍记录，今天看了一遍。&lt;/p&gt;
&lt;p&gt;然后再对着简历，准备了俩 Spring Boot 高频考点，粗看了一下 Git。早上还很早就醒了，害怕，jpg&lt;/p&gt;
</content>
        <category term="面试" />
        <updated>2024-04-12T04:15:51.000Z</updated>
    </entry>
</feed>
