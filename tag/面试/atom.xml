<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Chen • Posts by &#34;面试&#34; tag</title>
    <link href="http://example.com" />
    <updated>2024-06-23T08:42:22.000Z</updated>
    <category term="GLM" />
    <category term="dp" />
    <category term="Java" />
    <category term="位运算" />
    <category term="分类讨论" />
    <category term="redis" />
    <category term="lunix" />
    <category term="git" />
    <category term="vue3" />
    <category term="机器学习" />
    <category term="LLM" />
    <category term="AI" />
    <category term="Vue.js" />
    <category term="微信小程序" />
    <category term="面试" />
    <category term="chatgpt" />
    <category term="设计模式" />
    <entry>
        <id>http://example.com/2024/06/23/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
        <title>第二次面试准备</title>
        <link rel="alternate" href="http://example.com/2024/06/23/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
        <content type="html">&lt;h1 id=&#34;第二次面试准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二次面试准备&#34;&gt;#&lt;/a&gt; 第二次面试准备&lt;/h1&gt;
&lt;p&gt;我的简历，又又又优化了一下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240623164731985.png&#34; alt=&#34;image-20240623164731985&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;了解一下公司&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#了解一下公司&#34;&gt;#&lt;/a&gt; 了解一下公司&lt;/h2&gt;
&lt;h3 id=&#34;公司介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公司介绍&#34;&gt;#&lt;/a&gt; 公司介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;云行计划技术布道者&lt;/li&gt;
&lt;li&gt;成立于 2009 年，坐落于杭州湾畔，我们自认为是中国比较优秀的互联网服务提供商。自成立以来，专注于&lt;strong&gt;云计算技术、移动互联应用、B/S 架构系统研发&lt;/strong&gt;，为企业客户的互联网应用提供一站式服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（来自 boss）&lt;/p&gt;
&lt;h3 id=&#34;官网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官网&#34;&gt;#&lt;/a&gt; 官网&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240623165735071.png&#34; alt=&#34;image-20240623165735071&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个地方加载的很慢，如何优化&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20240623165917959.png&amp;quot; alt=&amp;quot;image-20240623165917959&amp;quot;/&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;岗位要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#岗位要求&#34;&gt;#&lt;/a&gt; 岗位要求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;扎实的 Java&lt;/li&gt;
&lt;li&gt;熟练使用 Linux&lt;/li&gt;
&lt;li&gt;熟练 Mysql、PostgreSQL&lt;/li&gt;
&lt;li&gt;Spring、Dubbo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自我介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我介绍&#34;&gt;#&lt;/a&gt; 自我介绍&lt;/h2&gt;
&lt;h2 id=&#34;项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目&#34;&gt;#&lt;/a&gt; &lt;strong&gt;项目&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础知识&#34;&gt;#&lt;/a&gt; 基础知识&lt;/h2&gt;
&lt;h3 id=&#34;redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt; Redis&lt;/h3&gt;
&lt;p&gt;见 面试准备一 以及 Redis 学习记录&lt;/p&gt;
&lt;h3 id=&#34;linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt; Linux&lt;/h3&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3 id=&#34;java&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt; Java&lt;/h3&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3 id=&#34;spring-postgresql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-postgresql&#34;&gt;#&lt;/a&gt; Spring、&lt;s&gt;PostgreSQL&lt;/s&gt;&lt;/h3&gt;
&lt;h4 id=&#34;什么是spring框架spring框架有哪些主要模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是spring框架spring框架有哪些主要模块&#34;&gt;#&lt;/a&gt; 什么是 Spring 框架？Spring 框架有哪些主要模块？&lt;/h4&gt;
&lt;p&gt;Spring 是一个&lt;strong&gt;轻量级的 JavaEE 框架&lt;/strong&gt;，它主要解决企业应用中的复杂性问题。&lt;/p&gt;
&lt;p&gt;Spring 框架有三个核心部分: &lt;strong&gt;lOC 容器、AOP 和数据访问 / 集成层。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;lOC 容器提供了一种对象创建和对象之间关系管理的机制，以实现松散耦合和可扩展性，&lt;/p&gt;
&lt;p&gt;AOP 提供了一种很好的方式来实现横向关注点的处理，如事务管理，安全检查，缓存等。&lt;/p&gt;
&lt;p&gt;数据访问 / 集成层则提供了许多针对不同数据持久化技术的实现，比如 JDBC，ORM 和 NoSQL。&lt;/p&gt;
&lt;p&gt;Spring 框架本身亦是按照设计模式精心打造，这使得我们可以在开发环境中安心的集成 Spring 框架，不必担心 Spring 是如何在后台进行工作的。spring 框架至今已集成了 20 多个模块。这些模块主要被分如下图所示的核心容器、数据访问 / 集成、Web、AOP (面向切面编程)、工具、消息和测试模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生态、基石&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240623192514857.png&#34; alt=&#34;image-20240623192514857&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;spring优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring优点&#34;&gt;#&lt;/a&gt; Spring 优点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;轻量级&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制反转（IOC）&lt;/strong&gt;、依赖注入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;切片编程（AOP）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MVC 框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可拓展性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;谈一下你对于springioc的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#谈一下你对于springioc的理解&#34;&gt;#&lt;/a&gt; 谈一下你对于 springIOC 的理解&lt;/h4&gt;
&lt;p&gt;控制反转&lt;/p&gt;
&lt;p&gt;整个 IOC 容器创建的流程和步骤如下：向 bean 工厂中设置一些参数、加载解析 bean 对象、BeanPostProcessor 的注册功能、通过反射的方式讲 BeanDefinition 对象实例化成具体的 bean 对象、bean 对象的初始化过程、生成完整的 bean 对象，通过 getBean 方法可以直接获取、销毁过程&lt;/p&gt;
&lt;h4 id=&#34;bean的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bean的生命周期&#34;&gt;#&lt;/a&gt; bean 的生命周期&lt;/h4&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h4 id=&#34;自动装配的各种模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动装配的各种模式&#34;&gt;#&lt;/a&gt; 自动装配的各种模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;byName&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;byType、constructor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;autodetect、no&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;beanfactory和applicationcontext有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#beanfactory和applicationcontext有什么区别&#34;&gt;#&lt;/a&gt; BeanFactory 和 ApplicationContext 有什么区别？&lt;/h4&gt;
&lt;p&gt;加载：BeanFactory 采用的是 ** 延迟加载（lazy-loading）** 的方式，即只有在使用到某个 Bean 时 才会对该 Bean 进行加载和实例化。而 ApplicationContext 则是在容器启动 时，&lt;strong&gt;一次性创建所有的 Bean&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;创建：BeanFactory 通常以&lt;strong&gt;编程的方式创建&lt;/strong&gt;，需要手动编写代码来配置和获取 Bean。而 ApplicationContext 除了支持编程方式创建外，还支持&lt;strong&gt;声明方式创建&lt;/strong&gt;，如使用 XML 配置文件或注解 来配置 Bean。&lt;/p&gt;
&lt;p&gt;功能：ApplicationContext 接口作为 BeanFactory 的&lt;strong&gt;派生&lt;/strong&gt;，不仅提供了 BeanFactory 所具有的功 能，还提供了更完整的框架功能。&lt;/p&gt;
&lt;h4 id=&#34;spring-aop的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-aop的理解&#34;&gt;#&lt;/a&gt; spring AOP 的理解&lt;/h4&gt;
&lt;p&gt;面向切面编程（AOP）：允许程序员模块化横向业务逻辑，或定义核心部分的功能，例如&lt;strong&gt;日志管理和事&lt;/strong&gt; 务管理。&lt;/p&gt;
&lt;p&gt;在 Spring AOP 中，切面通过带有 **@Aspect** 注解的类实现&lt;/p&gt;
&lt;p&gt;通知 (Advice)：通知表示在方法执行前后需要执行的动作。实际上它是 Spring AOP 框架在程序执行过程 中触发的一些代码。有前置通知、后置通知、环绕通知等&lt;/p&gt;
&lt;p&gt;动态代理：代理是将通知应用到目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样 的。&lt;/p&gt;
&lt;h4 id=&#34;spring中用到了哪些设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring中用到了哪些设计模式&#34;&gt;#&lt;/a&gt; spring 中用到了哪些设计模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单例模式：bean 默认都是单例的&lt;/li&gt;
&lt;li&gt;原型模式：指定作用域为 prototype&lt;/li&gt;
&lt;li&gt;工厂模式：BeanFactory&lt;/li&gt;
&lt;li&gt;模板方法：postProcessBeanFactory,onRefresh,initPropertyValue&lt;/li&gt;
&lt;li&gt;策略模式：XmlBeanDefinitionReader,PropertiesBeanDefinitionReader&lt;/li&gt;
&lt;li&gt;观察者模式：listener，event，multicast&lt;/li&gt;
&lt;li&gt;适配器模式：Adapter&lt;/li&gt;
&lt;li&gt;装饰者模式：BeanWrapper&lt;/li&gt;
&lt;li&gt;责任链模式：使用 aop 的时候会先生成一个拦截器链&lt;/li&gt;
&lt;li&gt;代理模式：动态代理&lt;/li&gt;
&lt;li&gt;委托者模式：delegate&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; MySQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;索引：b + 树、哈希、位图&lt;/li&gt;
&lt;li&gt;MySQL 优化：索引、查询优化（少子查询、模糊查询、全表查询）、表结构优化、缓存优化（Redis）、硬件优化&lt;/li&gt;
&lt;li&gt;慢查询：查询花费时间很多的日志&lt;/li&gt;
&lt;li&gt;死锁：避免大量查询、给事务加锁、增加悲观锁、设置合理超时时间&lt;/li&gt;
&lt;li&gt;优化大量数据插入：每一次插入的数量变多（合适数量），避免死锁，占用大量系统资源，磁盘空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dubbo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dubbo&#34;&gt;#&lt;/a&gt; &lt;s&gt;Dubbo&lt;/s&gt;&lt;/h3&gt;
&lt;p&gt;&lt;s&gt;随着互联网的发展，&lt;strong&gt;网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行&lt;/strong&gt;，亟需一个治理系统确保架构有条不紊的演进。&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;Apache Dubbo 最初是为了解决&lt;strong&gt;阿里巴巴内部的微服务架构问题&lt;/strong&gt;而设计并开发的，最早在 2008 年，阿里巴巴就将 Dubbo 捐献到开源社区。在 2017 年，Dubbo 被正式捐献 Apache 软件基金会并成为 Apache 顶级项目，开始了一段新的征程。&lt;/s&gt;&lt;/p&gt;
&lt;h4 id=&#34;为什么需要-dubbo它能做什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要-dubbo它能做什么&#34;&gt;#&lt;/a&gt; &lt;s&gt;为什么需要 Dubbo，它能做什么？&lt;/s&gt;&lt;/h4&gt;
&lt;p&gt;&lt;s&gt;按照微服务架构的定义，采用它的组织能够很好的提高业务迭代效率与系统稳定性，但前提是要先能保证微服务按照期望的方式运行，要做到这一点需要解决服务拆分与定义、数据通信、地址发现、流量管理、数据一致性、系统容错能力等一系列问题。&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;Dubbo 可以帮助解决如下微服务实践问题：&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;微服务编程范式和工具&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 支持基于 IDL 或语言特定方式的服务定义，提供多种形式的服务调用形式（如同步、异步、流式等）&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;高性能的 RPC 通信&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 帮助解决微服务组件之间的通信问题，提供了基于 HTTP、HTTP/2、TCP 等的多种高性能通信协议实现，并支持序列化协议扩展，在实现上解决网络连接管理、数据传输等基础问题。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;微服务监控与治理&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 官方提供的服务发现、动态配置、负载均衡、流量路由等基础组件可以很好的帮助解决微服务基础实践的问题。除此之外，您还可以用 Admin 控制台监控微服务状态，通过周边生态完成限流降级、数据一致性、链路追踪等能力。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;部署在多种环境&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 服务可以直接部署在容器、Kubernetes、Service Mesh 等多种架构下。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;活跃的社区&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 项目托管在 Apache 社区，有来自国际、国内的活跃贡献者维护着超 10 个生态项目，贡献者包括来自海外、阿里巴巴、工商银行、携程、蚂蚁、腾讯等知名企业技术专家，确保 Dubbo 及时解决项目缺陷、需求及安全漏洞，跟进业界最新技术发展趋势。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;庞大的用户群体&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo3 已在阿里巴巴成功落地，实现了对老版本 HSF2 框架全面升级，成为阿里集团面向云原生时代的统一服务框架底座，庞大的用户群体是 Dubbo 保持稳定性、需求来源、先进性的基础。&lt;/s&gt;&lt;/p&gt;
&lt;h4 id=&#34;dubbo-不是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dubbo-不是什么&#34;&gt;#&lt;/a&gt; &lt;s&gt;Dubbo 不是什么？&lt;/s&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不是应用开发框架的替代者&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 设计为让开发者以主流的应用开发框架的开发模式工作，它不是各个语言应用开发框架的替代者，如它不是 Spring/Spring Boot 的竞争者，当你使用 Spring 时，Dubbo 可以无缝的与 Spring &amp;amp; Spring Boot 集成在一起。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不仅仅只是一款 RPC 框架&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 提供了内置 RPC 通信协议实现，但它不仅仅是一款 RPC 框架。首先，它不绑定某一个具体的 RPC 协议，开发者可以在基于 Dubbo 开发的微服务体系中使用多种通信协议；其次，除了 RPC 通信之外，Dubbo 提供了丰富的服务治理能力与生态。&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不是 gRPC 协议的替代品&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;Dubbo 支持基于 gRPC 作为底层通信协议，在 Dubbo 模式下使用 gRPC 可以带来更好的开发体验，享有统一的编程模型和更低的服务治理接入成本&lt;/s&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;不只有 Java 语言实现&lt;/strong&gt;&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;s&gt;自 Dubbo3 开始，Dubbo 提供了 Java、Golang、Rust、Node.js 等多语言实现，未来会有更多的语言实现。&lt;/s&gt;&lt;/p&gt;
&lt;h2 id=&#34;知识拓展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#知识拓展&#34;&gt;#&lt;/a&gt; 知识拓展&lt;/h2&gt;
&lt;h2 id=&#34;引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbi5kdWJiby5hcGFjaGUub3JnL3poLWNuL292ZXJ2aWV3L3doYXQv&#34;&gt;Dubbo 介绍 | Apache Dubbo&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="面试" />
        <updated>2024-06-23T08:42:22.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/04/12/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
        <title>第一次面试准备</title>
        <link rel="alternate" href="http://example.com/2024/04/12/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;大概三月末的时候，学校有个招聘会，然后我投了几家。刚刚打电话，问我明早有没有时间远程面试&lt;/p&gt;
&lt;p&gt;没多想就答应了下来，这下好了，得回顾一下简历上写的东西了&lt;/p&gt;
&lt;p&gt;对的，很烂&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412121818555.png&#34; alt=&#34;image-20240412121818555&#34; /&gt;&lt;/p&gt;
&lt;p&gt;想着把 Redis 看一下（其实我还没学完，当时想着做简历就写上去了，而且最近在忙着比赛和打游戏，Java 这方面已经落下很多了）&lt;/p&gt;
&lt;p&gt;也许到时候可以把面试官往我最近比赛的方面引。&lt;/p&gt;
&lt;h1 id=&#34;可能的面试内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能的面试内容&#34;&gt;#&lt;/a&gt; 可能的面试内容&lt;/h1&gt;
&lt;p&gt;时间紧任务重，能准备的也不是很充分&lt;/p&gt;
&lt;h2 id=&#34;自我介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我介绍&#34;&gt;#&lt;/a&gt; &lt;s&gt;自我介绍&lt;/s&gt;&lt;/h2&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h2 id=&#34;redis项目的细节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis项目的细节&#34;&gt;#&lt;/a&gt; Redis 项目的细节 *&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;五种类型&lt;/p&gt;
&lt;p&gt;字符串、列表、hash、set、zset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久化策略&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存淘汰策略&lt;/p&gt;
&lt;p&gt;懒惰性删除 + 定期删除，懒惰性：用的时候才查是否过期。缺点：可能会有数据一直用不到，一直存在在内存。定期删除：定期删，缺点：遍历，时间长，内存压力大&lt;/p&gt;
&lt;p&gt;结合：抽取一部分定期删除 + 懒惰&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从、哨兵&lt;/p&gt;
&lt;p&gt;主服务器、从服务器，&lt;/p&gt;
&lt;p&gt;哨兵：监控、提醒、自动故障迁移、统一的配置管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他见 &lt;em&gt;Redis 学习记录&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-boot的相关知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot的相关知识&#34;&gt;#&lt;/a&gt; Spring boot 的相关知识&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412231410321.png&#34; alt=&#34;image-20240412231410321&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412231458213.png&#34; alt=&#34;image-20240412231458213&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;最近比赛的内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近比赛的内容&#34;&gt;#&lt;/a&gt; 最近比赛的内容&lt;/h2&gt;
&lt;p&gt;见 &lt;em&gt;A25&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt; Git&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412231950813.png&#34; alt=&#34;image-20240412231950813&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20240412232258004.png&#34; alt=&#34;image-20240412232258004&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;面后整理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面后整理&#34;&gt;#&lt;/a&gt; 面后整理&lt;/h1&gt;
&lt;h2 id=&#34;自我介绍-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我介绍-2&#34;&gt;#&lt;/a&gt; 自我介绍&lt;/h2&gt;
&lt;p&gt;阿巴阿巴&lt;/p&gt;
&lt;h2 id=&#34;问我什么项目提升最大redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问我什么项目提升最大redis&#34;&gt;#&lt;/a&gt; 问我什么项目提升最大（Redis）&lt;/h2&gt;
&lt;p&gt;我说了 Redis 的那个，介绍一下项目实现，因为没有开视频，我对着昨晚做的 Redis 讲 + 分布式锁&lt;/p&gt;
&lt;p&gt;（懂不懂一天速成 Redis 的含金量 后仰.jpg）&lt;/p&gt;
&lt;h2 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;#&lt;/a&gt; Mysql&lt;/h2&gt;
&lt;p&gt;索引、having、group by&lt;/p&gt;
&lt;h2 id=&#34;mybatis配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis配置文件&#34;&gt;#&lt;/a&gt; MyBatis 配置文件&lt;/h2&gt;
&lt;p&gt;Mysql 配置，MyBatis 插件的配置类……&lt;/p&gt;
&lt;h2 id=&#34;spring-boot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spring-boot&#34;&gt;#&lt;/a&gt; Spring Boot&lt;/h2&gt;
&lt;p&gt;AOP（可恶，看了的没问，没看的忘了）&lt;/p&gt;
&lt;h2 id=&#34;java基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java基础&#34;&gt;#&lt;/a&gt; Java 基础&lt;/h2&gt;
&lt;p&gt;ArrayList 和 LinkedList 区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList 基于动态数组实现的非线程安全的集合；LinkedList 基于链表实现的非线程安全的集合。&lt;/li&gt;
&lt;li&gt;对于随机 index 访问的 get 和 set 方法，一般 ArrayList 的速度要优于 LinkedList。因为 ArrayList 直接通过数组下标直接找到元素；LinkedList 要移动指针遍历每个元素直到找到为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问我什么课感兴趣&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问我什么课感兴趣&#34;&gt;#&lt;/a&gt; 问我什么课感兴趣&lt;/h2&gt;
&lt;p&gt;我说了 Java + 操作系统 + 数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作系统&lt;/p&gt;
&lt;p&gt;银行家算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git工具&#34;&gt;#&lt;/a&gt; git 工具&lt;/h2&gt;
&lt;p&gt;常用命令&lt;/p&gt;
&lt;h2 id=&#34;最近比赛的内容-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最近比赛的内容-2&#34;&gt;#&lt;/a&gt; 最近比赛的内容&lt;/h2&gt;
&lt;p&gt;因为我时不时提一嘴，我最近在打比赛，然后后面终于问了。&lt;strong&gt;之前在牛客学的精髓，引导面试官占据主导权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这我可太熟了，然后问我参数的意义&lt;/p&gt;
&lt;h2 id=&#34;由于涉及到ai问我ai对我们it行业的帮助&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#由于涉及到ai问我ai对我们it行业的帮助&#34;&gt;#&lt;/a&gt; 由于涉及到 AI，问我 AI 对我们 IT 行业的帮助&lt;/h2&gt;
&lt;p&gt;弱 AI，基于大数据而不是逻辑，所以只能辅助开发，而非独立开发&lt;/p&gt;
&lt;h2 id=&#34;结尾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结尾&#34;&gt;#&lt;/a&gt; 结尾&lt;/h2&gt;
&lt;p&gt;问了一下我的情况&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#感想&#34;&gt;#&lt;/a&gt; 感想&lt;/h2&gt;
&lt;p&gt;上次双选会，哥们就拿着之前做好的简历过去投，啥也没准备&lt;/p&gt;
&lt;p&gt;所以这一次算是第一次面试，昨天接到电话后一直在准备（虽然也玩了好些），但确实是半天速成 Redis，把敲代码的过程大部分跳了，然后关注原理，并记录。看完后昨晚看了一遍记录，今天看了一遍。&lt;/p&gt;
&lt;p&gt;然后再对着简历，准备了俩 Spring Boot 高频考点，粗看了一下 Git。早上还很早就醒了，害怕，jpg&lt;/p&gt;
</content>
        <category term="面试" />
        <updated>2024-04-12T04:15:51.000Z</updated>
    </entry>
</feed>
