{
    "version": "https://jsonfeed.org/version/1",
    "title": "Chen • All posts by \"workflow\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/04/16/About-ep-workflow/",
            "url": "http://example.com/2025/04/16/About-ep-workflow/",
            "title": "About ep-workflow",
            "date_published": "2025-04-16T03:30:13.000Z",
            "content_html": "<h1 id=\"项目概述\"><a class=\"anchor\" href=\"#项目概述\">#</a> 项目概述</h1>\n<p>这是一个基于 Flowable 的工作流项目，名为 epkeeper-workflow</p>\n<p>项目采用 Maven 多模块结构，包含两个主要模块：</p>\n<ul>\n<li>epkeeper-workflow-api：API 接口模块</li>\n<li>epkeeper-workflow-provider：服务提供者模块</li>\n</ul>\n<h2 id=\"技术栈\"><a class=\"anchor\" href=\"#技术栈\">#</a> 技术栈</h2>\n<ul>\n<li>\n<p>核心工作流引擎：Flowable</p>\n</li>\n<li>\n<p>数据库：MySQL</p>\n</li>\n<li>\n<p>缓存：Redis</p>\n</li>\n<li>\n<p>服务发现：Nacos</p>\n</li>\n<li>\n<p>消息队列：RabbitMQ</p>\n</li>\n<li>\n<p>ORM：MyBatis</p>\n</li>\n</ul>\n<h2 id=\"项目结构\"><a class=\"anchor\" href=\"#项目结构\">#</a> 项目结构</h2>\n<p>epkeeper-workflow-api 模块：</p>\n<ul>\n<li>\n<p>包含核心领域模型（core）</p>\n</li>\n<li>\n<p>Dubbo 接口定义</p>\n</li>\n<li>\n<p>数据模型和 POJO 对象</p>\n</li>\n</ul>\n<p>epkeeper-workflow-provider 模块：</p>\n<ul>\n<li>控制器层（Controller）</li>\n<li>Flowable 相关配置和处理器</li>\n<li>服务实现层</li>\n<li>MyBatis 数据访问层</li>\n</ul>\n<h2 id=\"主要功能\"><a class=\"anchor\" href=\"#主要功能\">#</a> 主要功能</h2>\n<ul>\n<li>\n<p>工作流程管理</p>\n</li>\n<li>\n<p>任务处理</p>\n</li>\n<li>\n<p>流程定义和部署</p>\n</li>\n<li>\n<p>表单管理</p>\n</li>\n<li>\n<p>用户任务管理（发起、待办、已办、抄送等）</p>\n</li>\n</ul>\n<h2 id=\"示例功能\"><a class=\"anchor\" href=\"#示例功能\">#</a> 示例功能</h2>\n<ul>\n<li>\n<p>包含一个完整的请假流程示例</p>\n</li>\n<li>\n<p>展示了从流程设计到实现的完整流程</p>\n</li>\n<li>\n<p>包含表单设计、流程定义、任务处理等功能</p>\n</li>\n</ul>\n<h2 id=\"特色功能\"><a class=\"anchor\" href=\"#特色功能\">#</a> 特色功能</h2>\n<ul>\n<li>\n<p>支持流程变量管理</p>\n</li>\n<li>\n<p>提供任务状态管理</p>\n</li>\n<li>\n<p>支持流程监听和超时处理</p>\n</li>\n<li>\n<p>提供自定义命令扩展</p>\n</li>\n<li>\n<p>支持业务表与工作流的绑定</p>\n</li>\n</ul>\n<h1 id=\"项目中用到的设计模式\"><a class=\"anchor\" href=\"#项目中用到的设计模式\">#</a> 项目中用到的设计模式</h1>\n<ul>\n<li>\n<p>工厂模式（Factory Pattern）</p>\n<ul>\n<li>\n<p>在 QueryUtils 类中使用了工厂模式创建各种查询对象</p>\n</li>\n<li>\n<p>例如：modelQuery ()、definitionQuery ()、deploymentQuery () 等方法都是工厂方法的实现</p>\n</li>\n<li>\n<p>这些方法封装了对象的创建过程，提供了统一的接口</p>\n</li>\n</ul>\n</li>\n<li>\n<p>单例模式（Singleton Pattern）</p>\n<ul>\n<li>\n<p>在 QueryUtils 类中使用了单例模式</p>\n</li>\n<li>\n<p>通过 private static final 确保 PROCESS_ENGINE 只有一个实例</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;image-20250416120059550.png&quot; alt=&quot;image-20250416120059550&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ul>\n<li>\n<p>观察者模式（Observer Pattern）</p>\n<ul>\n<li>\n<p>在 GlobalFlowableListener 类中实现了 FlowableEventListener 接口</p>\n</li>\n<li>\n<p>用于监听工作流引擎的各种事件，如任务创建、任务到期等</p>\n</li>\n<li>\n<p>通过 onEvent 方法响应不同类型的事件</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;image-20250416121122134.png&quot; alt=&quot;image-20250416121122134&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ul>\n<li>\n<p>策略模式（Strategy Pattern）</p>\n<ul>\n<li>\n<p>在 FlowableConfig 类中通过配置不同的处理器来实现不同的策略</p>\n</li>\n<li>\n<p>例如：自定义的 ID 生成器、事件监听器、任务处理器等</p>\n</li>\n<li>\n<p>这些都可以通过配置来灵活切换不同的实现策略</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;image-20250416121209328.png&quot; alt=&quot;image-20250416121209328&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ul>\n<li>\n<p>模板方法模式（Template Method Pattern）</p>\n<ul>\n<li>\n<p>在 BaseEntity 类中定义了通用的实体类属性和方法</p>\n</li>\n<li>\n<p>子类可以继承这个基类，复用通用的字段和行为</p>\n</li>\n<li>\n<p>包含了创建时间、更新时间等通用字段的自动填充逻辑</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;image-20250416121303749.png&quot; alt=&quot;image-20250416121303749&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ul>\n<li>\n<p>建造者模式（Builder Pattern）</p>\n<ul>\n<li>\n<p>在 PageQuery 类中使用了建造者模式</p>\n</li>\n<li>\n<p>通过 build () 方法构建分页对象</p>\n</li>\n<li>\n<p>支持链式调用设置各种参数</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;image-20250416121826481.png&quot; alt=&quot;image-20250416121826481&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ul>\n<li>\n<p>命令模式（Command Pattern）</p>\n<ul>\n<li>\n<p>在工作流处理中使用了命令模式</p>\n</li>\n<li>\n<p>通过 TaskTimeoutJobHandler 等处理器封装了具体的任务处理逻辑</p>\n</li>\n<li>\n<p>将请求封装为对象，使得可以用不同的请求对客户进行参数化</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;image-20250416121543926.png&quot; alt=&quot;image-20250416121543926&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n",
            "tags": [
                "workflow",
                "项目整理",
                "设计模式"
            ]
        }
    ]
}