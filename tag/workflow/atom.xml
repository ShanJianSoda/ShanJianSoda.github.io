<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Chen • Posts by &#34;workflow&#34; tag</title>
    <link href="http://example.com" />
    <updated>2025-04-16T03:30:13.000Z</updated>
    <category term="workflow" />
    <category term="项目整理" />
    <category term="设计模式" />
    <category term="GLM" />
    <category term="Vue3" />
    <category term="Java" />
    <category term="AI_Boot" />
    <category term="git" />
    <category term="dp" />
    <category term="位运算" />
    <category term="分类讨论" />
    <category term="redis" />
    <category term="lunix" />
    <category term="docker" />
    <category term="linux" />
    <category term="机器学习" />
    <category term="vue3" />
    <category term="LLM" />
    <category term="AI" />
    <category term="Vue.js" />
    <category term="微信小程序" />
    <category term="工作流" />
    <category term="工作总结" />
    <category term="面试" />
    <category term="chatgpt" />
    <entry>
        <id>http://example.com/2025/04/16/About-ep-workflow/</id>
        <title>About ep-workflow</title>
        <link rel="alternate" href="http://example.com/2025/04/16/About-ep-workflow/"/>
        <content type="html">&lt;h1 id=&#34;项目概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目概述&#34;&gt;#&lt;/a&gt; 项目概述&lt;/h1&gt;
&lt;p&gt;这是一个基于 Flowable 的工作流项目，名为 epkeeper-workflow&lt;/p&gt;
&lt;p&gt;项目采用 Maven 多模块结构，包含两个主要模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epkeeper-workflow-api：API 接口模块&lt;/li&gt;
&lt;li&gt;epkeeper-workflow-provider：服务提供者模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术栈&#34;&gt;#&lt;/a&gt; 技术栈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;核心工作流引擎：Flowable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库：MySQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存：Redis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务发现：Nacos&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息队列：RabbitMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORM：MyBatis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目结构&#34;&gt;#&lt;/a&gt; 项目结构&lt;/h2&gt;
&lt;p&gt;epkeeper-workflow-api 模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;包含核心领域模型（core）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dubbo 接口定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据模型和 POJO 对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;epkeeper-workflow-provider 模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制器层（Controller）&lt;/li&gt;
&lt;li&gt;Flowable 相关配置和处理器&lt;/li&gt;
&lt;li&gt;服务实现层&lt;/li&gt;
&lt;li&gt;MyBatis 数据访问层&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主要功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要功能&#34;&gt;#&lt;/a&gt; 主要功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工作流程管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任务处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流程定义和部署&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表单管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户任务管理（发起、待办、已办、抄送等）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#示例功能&#34;&gt;#&lt;/a&gt; 示例功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;包含一个完整的请假流程示例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;展示了从流程设计到实现的完整流程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含表单设计、流程定义、任务处理等功能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特色功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特色功能&#34;&gt;#&lt;/a&gt; 特色功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持流程变量管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供任务状态管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持流程监听和超时处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供自定义命令扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持业务表与工作流的绑定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;项目中用到的设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目中用到的设计模式&#34;&gt;#&lt;/a&gt; 项目中用到的设计模式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工厂模式（Factory Pattern）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 QueryUtils 类中使用了工厂模式创建各种查询对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：modelQuery ()、definitionQuery ()、deploymentQuery () 等方法都是工厂方法的实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这些方法封装了对象的创建过程，提供了统一的接口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单例模式（Singleton Pattern）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 QueryUtils 类中使用了单例模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 private static final 确保 PROCESS_ENGINE 只有一个实例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20250416120059550.png&amp;quot; alt=&amp;quot;image-20250416120059550&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;观察者模式（Observer Pattern）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 GlobalFlowableListener 类中实现了 FlowableEventListener 接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于监听工作流引擎的各种事件，如任务创建、任务到期等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 onEvent 方法响应不同类型的事件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20250416121122134.png&amp;quot; alt=&amp;quot;image-20250416121122134&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;策略模式（Strategy Pattern）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 FlowableConfig 类中通过配置不同的处理器来实现不同的策略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：自定义的 ID 生成器、事件监听器、任务处理器等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这些都可以通过配置来灵活切换不同的实现策略&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20250416121209328.png&amp;quot; alt=&amp;quot;image-20250416121209328&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模板方法模式（Template Method Pattern）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 BaseEntity 类中定义了通用的实体类属性和方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子类可以继承这个基类，复用通用的字段和行为&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含了创建时间、更新时间等通用字段的自动填充逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20250416121303749.png&amp;quot; alt=&amp;quot;image-20250416121303749&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;建造者模式（Builder Pattern）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 PageQuery 类中使用了建造者模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 build () 方法构建分页对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持链式调用设置各种参数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20250416121826481.png&amp;quot; alt=&amp;quot;image-20250416121826481&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令模式（Command Pattern）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在工作流处理中使用了命令模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 TaskTimeoutJobHandler 等处理器封装了具体的任务处理逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将请求封装为对象，使得可以用不同的请求对客户进行参数化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;image-20250416121543926.png&amp;quot; alt=&amp;quot;image-20250416121543926&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
</content>
        <category term="workflow" />
        <category term="项目整理" />
        <category term="设计模式" />
        <updated>2025-04-16T03:30:13.000Z</updated>
    </entry>
</feed>
