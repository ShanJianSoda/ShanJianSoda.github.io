{
    "version": "https://jsonfeed.org/version/1",
    "title": "Chen • All posts by \"微信小程序\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/12/24/%E5%AE%9E%E8%AE%AD%E5%91%A8%E5%81%9A%E4%BA%86%E5%95%A5/",
            "url": "http://example.com/2023/12/24/%E5%AE%9E%E8%AE%AD%E5%91%A8%E5%81%9A%E4%BA%86%E5%95%A5/",
            "title": "实训周做了啥",
            "date_published": "2023-12-24T06:37:13.000Z",
            "content_html": "<h1 id=\"开始\"><a class=\"anchor\" href=\"#开始\">#</a> 开始</h1>\n<p>又到了实训周，之前实训周做了啥都忘记了…… 于是记录一下，表示我真的做了（</p>\n<p>老师的要求是，先用 Vue.js 做一个简单的 Todo List，有点基础后，再做一个微信小程序。</p>\n<h2 id=\"看法\"><a class=\"anchor\" href=\"#看法\">#</a> 看法</h2>\n<p>我觉得前端界面，简单一点的话，就是组件的拼装，组件自身的样式，组件和同级组件的关系，组件和父级组件的关系。</p>\n<h1 id=\"做todo-list\"><a class=\"anchor\" href=\"#做todo-list\">#</a> 做 Todo List</h1>\n<h2 id=\"npm\"><a class=\"anchor\" href=\"#npm\">#</a> npm</h2>\n<p>，用 npm 创建了项目框架。而 bootstrap 组件库也不错，有好多好看的组件供使用</p>\n<p><code>npm run dev</code></p>\n<h2 id=\"数据绑定传输等\"><a class=\"anchor\" href=\"#数据绑定传输等\">#</a> 数据绑定传输等</h2>\n<p><code>@</code> （v-on）和 <code>：</code> （v-vbind），</p>\n<pre><code>@ 用于处理事件，而 : 用于处理属性绑定。这两个符号都是Vue.js中的常见语法糖，使代码更简洁易读 \n@ 符号是 v-on 指令的缩写。它用于监听DOM事件并触发相应的Vue实例中的方法。\n: 符号是 v-bind 指令的缩写。它用于动态绑定属性或表达式\n查自chatgpt 2023/12/11\n</code></pre>\n<p>我大致理解成，@是绑定事件（函数），：是跟参数之类的有关，也就是属性</p>\n<p><code>v-model</code>  可以在组件上使用以实现双向绑定</p>\n<p><code>&#123;&#123; item.task &#125;&#125;</code>  ，可以动态获取属性的值</p>\n<p><code>@click=&quot;changeCompleted(item.id)&quot;</code> ，（）里的，可以传参，而在微信小程序里，可以用 <code>data-xxx=“”</code>  传递参数</p>\n<h2 id=\"emit的使用\"><a class=\"anchor\" href=\"#emit的使用\">#</a> $emit 的使用</h2>\n<p>起初是想在 todoList.vue 调用 App.vue 里的函数，我用的是方法是，在 todoList.vue 里导入 App.vue，然后用 <code>App.method.XXX()</code> ，结果不行，后来老师说使用 emit 什么的，并帮我找到在官方文档哪，让我自己学一下。</p>\n<p>以下摘自 Vue.js - 事件 - 事件参数</p>\n<p>有时候我们会需要在触发事件时附带一个特定的值。举例来说，我们想要  <code>&lt;BlogPost&gt;</code>  组件来管理文本会缩放得多大。在这个场景下，我们可以给  <code>$emit</code>  提供一个额外的参数：</p>\n<p>template</p>\n<pre><code>&lt;button @click=&quot;$emit('increaseBy', 1)&quot;&gt;\n  Increase by 1\n&lt;/button&gt;\n</code></pre>\n<p>然后我们在父组件中监听事件，我们可以先简单写一个内联的箭头函数作为监听器，此函数会接收到事件附带的参数：</p>\n<p>template</p>\n<pre><code>&lt;MyButton @increase-by=&quot;(n) =&gt; count += n&quot; /&gt;\n</code></pre>\n<p>或者，也可以用一个组件方法来作为事件处理函数：</p>\n<p>template</p>\n<pre><code>&lt;MyButton @increase-by=&quot;increaseCount&quot; /&gt;\n</code></pre>\n<p>该方法也会接收到事件所传递的参数：</p>\n<p>js</p>\n<pre><code>function increaseCount(n) &#123;\n  count.value += n\n&#125;\n</code></pre>\n<h2 id=\"axios的使用\"><a class=\"anchor\" href=\"#axios的使用\">#</a> axios 的使用</h2>\n<p><code>npm install axios</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">itemid</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 发送 POST 请求给后端添加新任务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\taxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/todolist/removeTodolist'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t\t\t<span class=\"token comment\">// 参数传递</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    \t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> itemid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t\t\t<span class=\"token comment\">// 添加成功后，重新获取待办事项列表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetchTodoList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\t\t<span class=\"token comment\">// 处理错误</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error adding task:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"后端的搭建\"><a class=\"anchor\" href=\"#后端的搭建\">#</a> 后端的搭建</h2>\n<p>老师说如果有后端能加分，我想着这不能错过啊，于是几个月前学的 java 的 Spring Boot + Mybatis plus + mysql 就派上用场了</p>\n<p>根据之前跟着做的一个项目配置好 Todo List 后端后，写了点简单的增删查改，好些用法都忘记了，悲。</p>\n<h1 id=\"做微信小程序\"><a class=\"anchor\" href=\"#做微信小程序\">#</a> 做微信小程序</h1>\n<p>想着我自己也有个公众号，做一个我也能用的上的小程序接上去。</p>\n<p>挑来挑去，做了番茄时钟和一个简单的待办。</p>\n<p>也用了 van weapp 组件库，不过用不太来。</p>\n<h2 id=\"界面样式\"><a class=\"anchor\" href=\"#界面样式\">#</a> 界面样式</h2>\n<p>&lt;img src=&quot;../../public/images/2023/12 / 番茄时钟主界面.png&quot; alt=&quot;番茄时钟主界面&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;../../public/images/2023/12 / 番茄时钟 active.png&quot; alt=&quot;番茄时钟 active&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;../../public/images/2023/12/todolist.png&quot; alt=&quot;todolist&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;../../public/images/2023/12 / 番茄时钟 - 今日记录界面.png&quot; alt=&quot;番茄时钟 - 今日记录界面&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<h2 id=\"今日诗词的api\"><a class=\"anchor\" href=\"#今日诗词的api\">#</a> 今日诗词的 API</h2>\n<p>搭在 github 上的 hexo 博客也接入了这个免费的 API，需要在小程序后台添加该 API 的地址到可访问名单</p>\n<h2 id=\"界面的搭建\"><a class=\"anchor\" href=\"#界面的搭建\">#</a> 界面的搭建</h2>\n<p>直到做的差不多了，我才把大一时的前端课、近期学习的，在脑内乱成一锅粥的知识整理的差不多，也就是前端界面，简单一点的话，就是组件的拼装，组件自身的样式，组件和同级组件的关系，组件和父级组件的关系。</p>\n<h2 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h2>\n<p>数据则有的放 page 的 data 里，有的放缓存里，通过 <code>wx.setStorageSync('logs', logs);</code>  和 <code>wx.getStorageSync('logs', logs);</code></p>\n",
            "tags": [
                "Vue.js",
                "微信小程序"
            ]
        }
    ]
}